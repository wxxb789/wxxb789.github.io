

* [10]Annotation
:PROPERTIES:
:id: annotation
  
:END:
JDK中的Annotation\\
(一)注解的概念
1.注解是JavaJDK1.5引入的一种新的数据类型，它的本质其实是一个特殊的接口。这种特殊性在于：
(1)直接继承java.lang.anotation.Annotation接口，这意味着注解接口没有子接口；
(2)表现形式：public @interface Xxx @的含义是： public interfac Xxx
extends Annotation
(3)注解接口不需要程序员实现，因为JVM在程序运行时为注解接口动态产生代理类及其对象；

2.注解的定义形式: public @interface AnnotationName{ 元素声明1;
元素声明2; ... } 其中，元素声明通常有如下两种形式： (1) 元素类型
元素名称() (2) 元素类型 元素名称() default value;

3.注解接口中的元素实质： (1)注解接口中的元素声明实际上是方法的声明；
(2)注解接口中的方法没有任何参数；
(3)注解接口中的方法有返回值，可以通过default
value，为方法指定默认的返回值；

4.注解元素的类型为下列之一： √(1)一个基本类型(int short long byte char
double float boolean); √(2)String类型 -------------- √(3)enum类型\\
-------------- (4)Class类型 (5)注解类型 √(6)由上述类型组成的数组；

5.举例：注解接口定义： public @interface BugReport{ String assignedTo()
default "none"; int severity() default 0; }

(二)注解的使用 1.注解作为修饰符用来标注程序元素； =======
2.程序元素在java.lang.annotation包下的ElementType枚举类有明确的定义：
(1)PACKAGE 包 √(2)TYPE 类和接口(包括注解接口) (3)ANNOTATION_TYPE
注解接口 √(4)FIELD 成员变量 √(5)CONSTRUCTOR 构造器 √(6)METHOD 方法
(7)PARAMETER 方法参数 (8)LOCAL_VARIABLE 方法局部变量

3.注解的标注格式 @AnnotationName(元素名称1=值1,元素名称2=值2,...) 举例：
@BugReport(assignedTo="Wangda", severity=10); 说明:
如果某个元素在使用时未指明，则使用声明时的默认值，例如：
@BugReport(assignedTo="Lifen");元素serverity的值是0。

4.注解使用的进一步说明： (1)标记型注解， 例如: @BugReport 如下两种情况：
(a)注解接口中可能没有定义任何元素； (b)注解使用元素的默认值
(2)单值注解的简洁格式
如果注解中的元素名称是value，且没有其它元素，则使用时可以忽略元素的名称及等号。
例如：一个注解接口如下： public @interface ActionListenerFor{ String
value(); } 使用时，可以有两种形式：
@ActionListernerFor(value="yelloButton") 或者：
@ActionListenerFor("yellowButton") (3)注解元素值是一个数组 例如： public
@interface BugReport{ String[] reportedBy(); }
使用时，需要使用{}表示数组值 @BugReport(reportedBy={"wangda","qiangui"})
如果数组中只有一个单值，也可以省略{}
@BugReport(reportedBy="Joe")等价于@BugReport(reportedBy={"Joe"})

三、JDK中所定义的注解 [①元注解②规则注解③和依赖注入相关的注解]
1.元注解(位于java.lang.annotation包下) (1)什么是元注解？
元注解是用来标注注解的注解！ (2)为什么要使用元注解？
说明注解的使用方式，明确如下问题： (2-1)注解标注哪些程序元素？
(2-2)注解的保留到哪一个阶段？ (2-3)注解是否进入文档？
(2-4)注解是否被继承？ (3)JDK定义了哪些元注解？ (3-1)@Documented
(3-1-1)用途 注解进入文档，JavaDoc文档工具可以将注解提取到文档中。
(3-1-2)定义 @Documented @Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.ANNOTATION_TYPE) public @interface Documented { }

#+begin_example
   (3-2)@Inherited
        (3-2-1)用途
                             继承的子类自动拥有父类的注解；
        (3-2-2)定义
          @Documented
          @Retention(RetentionPolicy.RUNTIME)
          @Target(ElementType.ANNOTATION_TYPE)
          public @interface Inherited {
          }
   
   (3-3)@Retention(enumValue)
        (3-3-1)用途  
                             指明程序中的注解保留到哪一个阶段；有三个阶段:source、class和runtime,被称为保留策略。
        (3-3-2)保留策略的定义
          RetentionPolicy是枚举类，在该类中定义了注解的3种保留策略:
          (a)RUNTIME √
                                     注解保留到程序运行时,JVM运行时会执行注解；
          (b)CLASS
                                    注解保留到编译期；
          (c)SOURCE
                                    注解只保留在源码中,编译器编译时会考察注解；
        (3-3-3)定义
          @Documented
          @Retention(RetentionPolicy.RUNTIME)
          @Target(ElementType.ANNOTATION_TYPE)
          public @interface Retention {
            RetentionPolicy value();
          }
      
   (3-4)@Target({enumValue1, enumValue2, ...})
        (3-4-1)用途
                          指明注解所标注的程序元素，程序元素在ElementType枚举类中进行了定义，
        (3-4-2)定义
          @Documented
          @Retention(RetentionPolicy.RUNTIME)
          @Target(ElementType.ANNOTATION_TYPE)
          public @interface Target {
              ElementType[] value();
          }
#+end_example

2.规则注解(位于java.lang包下)： (1)@Override (1-1)定义：
@Target(value=METHOD) @Retention(value=SOURCE) public @interface
Override (1-2)用途：
如果方法利用此注解进行标注但没有重写超类方法，则编译器会生成一条错误消息。
(2)@Deprecated (2-1)定义： @Documented @Retention(value=RUNTIME) public
@interface Deprecated (2-2)用途： 用 @Deprecated
所标注的程序元素，不鼓励程序员使用;如果强行使用,编译器会发出警告。
这个注解与Java文档标签@deprecated具有同等的功效。

(3)@SuppressWarnings({"value1","value2",...}) (3-1)定义
@Target(value={TYPE,FIELD,METHOD,PARAMETER,CONSTRUCTOR,LOCAL_VARIABLE})
@Retention(value=SOURCE) public @interface SuppressWarnings{ String[]
value() } (3-2)用途： 抑制编译器所产生的警告信息
例如：@SuppressWarnings({"unchecked","rawtypes","serial"})

3.和依赖注入相关的注解(位于javax.annotation包下)
(1)@Resource(name="value1") (1-1)定义：
@Target(value={TYPE,FIELD,METHOD}) @Retention(value=RUNTIME) public
@interface Resource{ √ String name() default "" Class type() default
Object.class } (1-2)用途------实施依赖注入 (1-2-1)标注成员变量，
注入的对象，默认名称为字段名； (1-2-2)标注方法
通过方法参数注入的对象，默认名称为JavaBean的属性名称； (1-2-3)标注类
没有默认值，必须指明所注入对象的名称 (1-3)注意
默认情况下按名称自动装配,找不到按类型自动装配.

(2)@PostConstruct (2-1)定义 @Documented @Retention(value=RUNTIME)
@Target(value=METHOD) public @interface PostConstruct (2-2)用途：
在对象的依赖关系注入之后，所需要进一步执行的初始化方法。要求被标注的方法不能有参数，而且无返回值。
参照：spring04_annotation->anno.demo3.UseBean.java (3)@PreDestroy
(3-1)定义： @Documented @Retention(value=RUNTIME) @Target(value=METHOD)
public @interface PreDestroy (3-2)用途：
在容器销毁对象前所执行的方法，目的是为了释放资源。要求被标注的方法不能有参数，而且无返回值。

Spring注解 一、Spring框架定义的注解
分类：组件、依赖注入、容器管理、事务
1.组件对象(位于org.springframework.stereotype包下)； ==========
(1)@Component (通用性组件) ①定义： @Target(value=TYPE)
@Retention(value=RUNTIME) @Documented public @interface Component{
String value(); } ②用途： (a)通用性的标注，可以标注任意类
(b)所标注的类产生指定名称的对象；对象的默认名称为所标注类的类名首字母小写

(2)@Controller (组件进一步细分之控制器) ①定义： @Target(value=TYPE)
@Retention(value=RUNTIME) @Documented @Component
//说明了该注解实质上是Component public @interface Controller{ String
value(); } ②应用： (a)专用性标注，通常标注控制器
(b)所标注的类产生指定名称的对象；对象的默认名称为所标注类的类名首字母小写

(3)@Service (组件进一步细分之业务组件) ①定义： @Target(value=TYPE)
@Retention(value=RUNTIME) @Documented @Component public @interface
Service{ String value(); } ②应用： (a)专用性标注，通常标注业务组件
(b)所标注的类产生指定名称的对象；对象的默认名称为所标注类的类名首字母小写

(4)@Repository (组件进一步细分之DAO组件) ①定义： @Target(value=TYPE)
@Retention(value=RUNTIME) @Documented @Component public @interface
Repository{ String value(); } ②应用： (a)专用性标注，通常标注DAO组件
(b)所标注的类产生指定名称的对象；对象的默认名称为所标注类的类名首字母小写

2.依赖注入(位于org.springframework.beans.factory.annotation包下)：
================== (1)@Autowired ①定义： @Retention(value=RUNTIME)
@Target(value={CONSTRUCTOR,FIELD,METHOD}) public @interface Autowired{
boolean required() default true } ②应用：
实施自动绑定。如果不提供@Qualifier("beanName"),将按照类型实施绑定；
(2)@Qualifier("beanName") ①定义： @Retention(value=RUNTIME)
@Target(value={FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Inherited
@Documented public @interface Qualifier{ String value default "" }
②应用： 按照标注所指定的名称，实施自动绑定。
3.容器管理(位于org.springframework.context.annotation包下)：
=================== (1)@Scope ①定义： @Target(value={TYPE,METHOD})
@Retention(value=RUNTIME) @Documented public @interface Scope{ String
value() default "singleton" ; } ②应用：
指明被标注的类所产生的对象是:单例对象还是多例对象 (2)@Lazy ①定义：
@Target(value={TYPE,METHOD}) @Retention(value=RUNTIME) @Inherited
@Documented public @interface Lazy{ boolean value() default true; }
②应用： 指明Spring容器是否延迟创建对象，默认是延迟

4.事务(位于org.springframework.transaction.annotation包下)：
====================== (1)@Transactional ①定义
@Target({ElementType.METHOD，ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME) @Inherited @Documented public
@interface Transactional{ /Propagation propagation() default
Propagation.REQUIRED; Isolation isolation() default
Isolation.DEFAULT;//由底层的数据库决定 int timeout() default
TransactionDefinition.TIMEOUT_DEFAULT; /boolean readOnly() default
false;

#+begin_example
       Class<? extends Throwable>[] rollbackFor() default {};
       String[] rollbackForClassName() default {};
       Class<? extends Throwable>[] noRollbackFor() default {};
       String[] noRollbackForClassName() default {};
     }
          ②标注类，标注方法
             参考案例：Spring06_hibernate06_tran2->anno.service.UserServiceImpl.java
#+end_example

(2)enum Isolation所定义的常量 DEFAULT Use the default isolation level of
the underlying datastore. READ_COMMITTED A constant indicating that
dirty reads are prevented; non-repeatable reads and phantom reads can
occur. READ_UNCOMMITTED A constant indicating that dirty reads,
non-repeatable reads and phantom reads can occur. REPEATABLE_READ A
constant indicating that dirty reads and non-repeatable reads are
prevented; phantom reads can occur. SERIALIZABLE A constant indicating
that dirty reads, non-repeatable reads and phantom reads are prevented.
(3)enum Propagation所定义的常量 MANDATORY Support a current transaction,
throw an exception if none exists. NESTED Execute within a nested
transaction if a current transaction exists, behave like
PROPAGATION_REQUIRED else. NEVER Execute non-transactionally, throw an
exception if a transaction exists. NOT_SUPPORTED Execute
non-transactionally, suspend the current transaction if one exists.
REQUIRED Support a current transaction, create a new one if none exists.
REQUIRES_NEW Create a new transaction, suspend the current transaction
if one exists. SUPPORTS Support a current transaction, execute
non-transactionally if none exists.
(4)Spring的事务抽象，包括3个主要接口： ①PlatformTransactionManager
负责界定事务边界 ②TransactionDefinition 定义了: (a)事务的传播行为；
(b)事务的只读提示； (c)事务的隔离级别； (d)事务的超时设定
③TransactionStatus定义了事务的状态

二、AspectJ所定义的注解 1.切面组件(Aspect)： ①定义：
@Retention(value=RUNTIME) @Target(value=TYPE) public @interface Aspect{
String value() default ""; } ②应用：
用来标注类的，指明该类对象是切面对象

2.切入点(Pointcut)： ①定义： @Retention(value=RUNTIME)
@Target(value=METHOD) public @interface Pointcut{ String value() default
""; //指明Pointcut表达式 } ②应用：
(a)@Pointcut是方法级别的注解，因此不能脱离某个方法单独声明；
(b)为@Pointcut定义的一个空方法是：Pointcut Signature。
在Advice中可以通过该方法签名引用切入点表达式。参考案例：
spring04_aop2_anno2->anno.aop.OptLogger.java

3.通知(Advice): (1)BeforeAdvice ①定义： @Retention(value=RUNTIME)
@Target(value=METHOD) public @interface Before{ String value() default
""; } ②应用： 标注方法，指明该方法定义了前置通知的横切逻辑
(2)AfterReturningAdvice\\
①定义： @Retention(value=RUNTIME) @Target(value=METHOD) public
@interface AfterReturning{ String value()
default"";//用于默认指定切入点表达式 √ String pointcut() default"";
//用于显示指定切入点表达式 √ String returning()
default"";//引用目标对象的返回值； } ②应用：
标注方法，指明该方法定义了后置通知的横切逻辑 (3)AfterThrowingAdvice
①定义 @Retention(value=RUNTIME) @Target(value=METHOD) public @interface
AfterThrowing{ String value() default"";//用于默认指定切入点表达式 √
String pointcut() default""; //用于显示指定切入点表达式 √ String
throwing() default"";//引用目标对象执行方法所抛出的异常对象 } ②应用：
标注方法，指明该方法定义了异常通知的横切逻辑 (4)AfterAdvice ①定义
@Retention(value=RUNTIME) @Target(value=METHOD) public @interface After{
String value() default""; } ②应用：
标注方法，指明该方法定义了最终通知的横切逻辑 (5)AroundAdvice ①定义
@Retention(value=RUNTIME) @Target(value=METHOD) public @interface
Around{ String value() default""; } ②应用：
标注方法，指明该方法定义了环绕通知的横切逻辑

三、使用Spring注解时xml文件的配置： (1)
①扫描指定包下的所有类，寻找标注了相应注解的类，并添加到IoC容器中；
②扫描的注解类型是:
@Component及其衍生的细化类型@Controller、@Service、@Repository；
③【注意】！！
扫描的注解类型不包括@Aspect，因此需要使用单独的bean标签注册@Aspect标注的类
(2) 在spring容器中，自动创建切面并为目标对象创建代理对象。 (3)
事务的注解驱动，需要依赖于PlatformTransactionManager

#Spring注解 一、Spring框架定义的注解
分类:组件创建,依赖注入,容器管理,事务
1.组件对象(位于org.springframework.stereotype包下)； ==========
(1)@Component ①定义： @Target(value=TYPE) @Retention(value=RUNTIME)
@Documented public @interface Component{ String value(); } ②用途：
(a)通用性的标注，可以标注任意类
(b)所标注的类产生指定名称的对象；对象的默认名称为所标注类的类名首字母小写

(2)@Controller ①定义： @Target(value=TYPE) @Retention(value=RUNTIME)
@Documented @Component //说明了该注解实质上是Component public @interface
Controller{ String value(); } ②应用： (a)专用性标注，通常标注控制器
(b)所标注的类产生指定名称的对象；对象的默认名称为所标注类的类名首字母小写

(3)@Service ①定义： @Target(value=TYPE) @Retention(value=RUNTIME)
@Documented @Component public @interface Service{ String value(); }
②应用： (a)专用性标注，通常标注业务组件
(b)所标注的类产生指定名称的对象；对象的默认名称为所标注类的类名首字母小写

(4)@Repository ①定义： @Target(value=TYPE) @Retention(value=RUNTIME)
@Documented @Component public @interface Repository{ String value(); }
②应用： (a)专用性标注，通常标注DAO组件
(b)所标注的类产生指定名称的对象；对象的默认名称为所标注类的类名首字母小写

2.依赖注入(位于org.springframework.beans.factory.annotation包下)：
================== (1)@Autowired ①定义： @Retention(value=RUNTIME)
@Target(value={CONSTRUCTOR,FIELD,METHOD}) public @interface Autowired{
boolean required() default true } ②应用：
实施自动绑定。如果不提供@Qualifier("beanName"),将按照类型实施绑定；
(2)@Qualifier("beanName") ①定义： @Retention(value=RUNTIME)
@Target(value={FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Inherited
@Documented public @interface Qualifier{ String value default "" }
②应用： 按照标注所指定的名称，实施自动绑定。
3.容器管理(位于org.springframework.context.annotation包下)：
=================== (1)@Scope ①定义： @Target(value={TYPE,METHOD})
@Retention(value=RUNTIME) @Documented public @interface Scope{ String
value() default "singleton" ; } ②应用：
指明被标注的类所产生的对象是:单例对象还是多例对象 (2)@Lazy ①定义：
@Target(value={TYPE,METHOD}) @Retention(value=RUNTIME) @Inherited
@Documented public @interface Lazy{ boolean value() default true; }
②应用： 指明Spring容器是否延迟创建对象，默认是延迟

4.事务(位于org.springframework.transaction.annotation包下)：
====================== (1)@Transactional ①定义
@Target({ElementType.METHOD，ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME) @Inherited @Documented public
@interface Transactional{ Progagation propagation() default
Propagation.REQUIRED; Isolation isolation() default
Isolation.DEFAULT;//由底层的数据库决定 int timeout() default
TransactionDefinition.TIMEOUT_DEFAULT; boolean readOnly() default false;

#+begin_example
       Class<? extends Throwable>[] rollbackFor() default {};
       String[] rollbackForClassName() default {};
       Class<? extends Throwable>[] noRollbackFor() default {};
       String[] noRollbackForClassName() default {};
     }
          ②标注类，标注方法
             参考案例：Spring06_hibernate06_tran2->anno.service.UserServiceImpl.java
#+end_example

(2)enum Isolation所定义的常量 DEFAULT Use the default isolation level of
the underlying datastore. READ_COMMITTED A constant indicating that
dirty reads are prevented; non-repeatable reads and phantom reads can
occur. READ_UNCOMMITTED A constant indicating that dirty reads,
non-repeatable reads and phantom reads can occur. REPEATABLE_READ A
constant indicating that dirty reads and non-repeatable reads are
prevented; phantom reads can occur. SERIALIZABLE A constant indicating
that dirty reads, non-repeatable reads and phantom reads are prevented.
(3)enum Propagation所定义的常量 MANDATORY Support a current transaction,
throw an exception if none exists. NESTED Execute within a nested
transaction if a current transaction exists, behave like
PROPAGATION_REQUIRED else. NEVER Execute non-transactionally, throw an
exception if a transaction exists. NOT_SUPPORTED Execute
non-transactionally, suspend the current transaction if one exists.
REQUIRED Support a current transaction, create a new one if none exists.
REQUIRES_NEW Create a new transaction, suspend the current transaction
if one exists. SUPPORTS Support a current transaction, execute
non-transactionally if none exists.
(4)Spring的事务抽象，包括3个主要接口： ①PlatformTransactionManager
负责界定事务边界 ②TransactionDefinition 定义了: (a)事务的传播行为；
(b)事务的只读提示； (c)事务的隔离级别； (d)事务的超时设定
③TransactionStatus定义了事务的状态

二、AspectJ语言所定义的注解 1.切面组件(Aspect)： ①定义：
@Retention(value=RUNTIME) @Target(value=TYPE) public @interface Aspect{
String value() default ""; } ②应用： 标注类，指明该类对象是切面对象

2.切入点(Pointcut)： ①定义： @Retention(value=RUNTIME)
@Target(value=METHOD) public @interface Pointcut{ String value() default
""; //指明Pointcut表达式 } ②应用：
(a)@Pointcut是方法级别的注解，因此不能脱离某个方法单独声明；
(b)为@Pointcut定义的一个空方法是：Pointcut Signature。
在Advice中可以通过该方法签名引用切入点表达式。参考案例：
spring04_aop2_anno2->anno.aop.OptLogger.java

3.通知(Advice): (1)BeforeAdvice ①定义： @Retention(value=RUNTIME)
@Target(value=METHOD) public @interface Before{ String value() default
""; } ②应用： 标注方法，指明该方法定义了前置通知的横切逻辑
(2)AfterReturningAdvice\\
①定义： @Retention(value=RUNTIME) @Target(value=METHOD) public
@interface AfterReturning{ String value()
default"";//用于默认指定切入点表达式 √ String pointcut() default"";
//用于显示指定切入点表达式 √ String returning()
default"";//引用目标对象的返回值； } ②应用：
标注方法，指明该方法定义了后置通知的横切逻辑 (3)AfterThrowingAdvice
①定义 @Retention(value=RUNTIME) @Target(value=METHOD) public @interface
AfterThrowing{ String value() default"";//用于默认指定切入点表达式 √
String pointcut() default""; //用于显示指定切入点表达式 √ String
throwing() default"";//引用目标对象执行方法所抛出的异常对象 } ②应用：
标注方法，指明该方法定义了异常通知的横切逻辑 (4)AfterAdvice ①定义
@Retention(value=RUNTIME) @Target(value=METHOD) public @interface After{
String value() default""; } ②应用：
标注方法，指明该方法定义了最终通知的横切逻辑 (5)AroundAdvice ①定义
@Retention(value=RUNTIME) @Target(value=METHOD) public @interface
Around{ String value() default""; } ②应用：
标注方法，指明该方法定义了环绕通知的横切逻辑

三、使用Spring注解时xml文件的配置： (1)
①扫描指定包下的所有类，寻找标注了相应注解的类，并添加到IoC容器中；
②扫描的注解类型是:
@Component及其衍生的细化类型@Controller、@Service、@Repository；
③【注意】！！
扫描的注解类型不包括@Aspect，因此需要使用单独的bean标签注册@Aspect标注的类
(2) 在spring容器中，自动创建切面并为目标对象创建代理对象。 (3)
事务的注解驱动，需要依赖于PlatformTransactionManager