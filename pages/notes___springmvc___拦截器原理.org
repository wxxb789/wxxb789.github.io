

* 拦截器原理
** 1. SpringMVC拦截器


1. 针对Handler对象（控制器）的执行方法实施预处理和后处理以及最终处理。

   1. 预处理：在请求Handler时，首先执行拦截器的方法，然后再执行Handler的处理方法；
   2. 后处理：执行完Handler的处理方法后，还可以执行拦截器的补充方法；
   3. 最终处理：在一个请求处理完毕的最后环节所执行的方法。

2. 应用场景

   1. 性能监控：比如统计和记录请求的处理时间；
   2. 权限检查：针对某些重要的操作，必须要求用户成功登录后才可以实施；
   3. 通用的附加功能：比如Cookie处理，国际化Locale对象的处理。
** 2. 开发SpringMVC拦截器


1. 实现拦截器接口
2. preHandle：第三个参数是控制器（此时控制器还没有执行）

   1. 如果返回值是true，表示继续流程（执行下一个拦截器或处理器）；
   2. 如果返回值是false，
      表示流程中断，不会继续调用其他的拦截器或处理器，此时需要通过
      response对象来产生响应；

3. postHandle：实现处理器的后处理（但在渲染视图之前），此时可以通过
   modelAndView（模型和视图对象）对模型数据进行处理或对视图进行处理，modelAndView
   可以为 null。
4. afterCompletion：此时视图已经渲染完毕，如果进行性能监控，应该在这个时点记录结束时间；在这个阶段还可以进行一些资源的清理工作。
* 拦截器的执行流程


1. 拦截器正常执行的流程

   1. HandlerAdapter调用Handler，代表控制器的执行
   2. View渲染代表的是生成了视图结果（比如产生了页面）
   3. 围绕控制器，拦截器实施了环绕执行并含有最终执行。
   
2. 拦截器中断的执行流程

   1. 拦截器1的preHandle正常执行（返回值是true），但拦截器2的preHandle执行的返回值是false，代表的是中断执行;
   2. 拦截器2的中断执行导致后续的控制器、拦截器2和1的postHandle方法、视图渲染以及拦截器2的afterCompletion（最终方法）都不执行。
   3. 拦截器1的afterCompletion方法执行：拦截器1的preHandle方法返回值是true，表明没有中断，所以可以执行afterCompletion方法。
* 拦截器适配器


1. 如果直接实现 HandlerInterceptor 接口，三个方法必须都要实现。
2. SpringMVC提供了一个 HandlerInterceptorAdapter
   适配器（一种适配器设计模式的实现），允许开发人员专注于特定的接口方法实施重写，另外2个接口方法是空实现

   1. 空实现：public boolean preHandle(return true;);