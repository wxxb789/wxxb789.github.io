* Outline

1.  信息的表示和处理
2.  程序的机器级表示

    1. 栈分配
    2. 寄存器

3.  处理器体系结构

    1. HCL
    2. 流水线

4.  优化程序性能

    1. 减少程序需要做的工作
    2. 增加生成的机器代码中指令级并行度（乱序执行）

5.  存储器层次结构
6.  链接

    1. 静态链接
    2. 动态链接
    3. 可重定位的和可执行的目标文件
    4. 符号解析
    5. 重定位
    6. 静态库
    7. 共享目标库
    8. 位置无关代码
    9. 库打桩

7.  异常流控制

    1. 硬件异常和中断
    2. 并发进程的上下文切换
    3. 接收 Linux 信号引起的控制流突变
    4. C 语言中，破坏栈原则的非本地跳转
    5. 进程管理
    6. 调度算法

8.  虚拟内存

    1. 共享页，独占页
    2. 存储分配操作（ =malloc= ， =free= ）
    3. 内存管理（动态内存分配）
    4. 内存映射

9.  系统级IO

    1. Unix IO 的文件和描述符
    2. 共享文件
    3. IO 重定向
    4. 文件元数据
    5. 带缓冲区的 IO （short count，只读取一部分数据）
    6. C 的标准 IO 与 Linux IO 的关系
    7. 标准 IO 的局限性，导致并不适合网络编程

10. 网络编程

    1. 并发
    2. 套接字
    3. CS 模型
    4. HTTP

11. 并发编程

    1. 进程
    2. IO 多路复用
    3. 线程
    4. P，V 信号量操作实现同步，线程安全，可重入，竞争条件以及死锁

12. 文件系统