

* 代理模式(Proxy)


1.  注解(anotation)
    对象在JVM中的生成以及Spring框架中的AOP编程等均是动态代理模式的体现
    ## 1. 代码侵入
2.  直接将 表示增强功能的代码 直接添加到 业务方法中 被称为代码侵入 ## 2.
    静态代理模式实施改进
3.  静态代理模式，即需要程序员手动编写代理类，而非通过JVM生成代理类。
4.  编写静态代理类

    1. 将增强代码单独封装成类，称为代理类
    2. 要求Ⅰ：代理类实现目标类的接口，进而拥有代理方法
    3. 要求Ⅱ：代理类依赖目标类，提供相应的set和get方法； ## 3.
       动态代理模式

5.  动态代理模式是在静态代理模式改进的基础上，在程序运行时由JVM自动创建代理类，并产生代理对象
6.  需要使用JavaSE
    JDK中的Proxy类：位于java.lang.reflect包下，是JVM所创建的动态代理类的父类。
7.  Proxy类提供了如下的静态方法，用于通知JVM执行时，动态生成代理类（Proxy的子类），并创建代理对象

    1. static Object newProxyInstance(ClassLoader loader，Class<?>[ ]
       interfaces，InvocationHandler h)

       1. 参数1：动态代理类的类加载器（与接口的类加载器一致）；
       2. 参数2：动态代理类所实现的接口（与目标类所实现的接口一致）；
       3. 参数3：表明动态代理类依赖InvocationHandler对象；
       4. 返回值：动态代理对象；

8.  采用工厂模式封装动态代理对象的创建过程

    1. 定义一个获得动态代理对象的静态方法getDynamicProxy(IStringProcessing
       target)，其中参数类型是业务接口
    2. 根据传递进来的目标对象，首先创建InvocationHandler对象并设置它和目标对象的依赖关系，然后再调用Proxy类的静态方法newProxyInstanc(...)，生成动态代理对象；

9.  动态代理模式编程总结

    1. 创建一个InvocationHandler接口的实现类，并设置该类与目标类的依赖关系，并在invoke方法中整合代表附加功能的增强代码和目标对象业务方法的调用代码；
    2. 用静态工厂方法封装Proxy.newProxyInstance语句的使用，从而动态创建代理类并获得动态代理对象。
       ## 4. InvocationHandler接口

10. 将代理方法中的相同代码提取出来，单独封装在一个类中，并且要求这个类实现InvocationHandler接口；
11. InvocationHandler接口是JavaSE在java.lang.reflect包下定义的一个接口，它的作用是实施调用委派。

    1. 调用委派：将任意对象的方法调用，委派给接口对象的invoke方法调用，目的是实现代码合并。
    2. InvocationHandler接口中只有一个invoke方法，即Object invoke(Object
       proxy, Method method, Object[] args)

       1. invoke方法的作用：以反射的方式将代理方法的调用解析为统一的形式：

12. 改进流程

    1. 创建一个实现了InvocationHandler接口的实现类LogHandler类，要求LogHandler类依赖目标类，将代理类的
       代理方法中的增强代码 和 调用目标对象业务方法的代码
       封装在invoke方法中；
    2. 重新封装代理类，使其不直接依赖于目标类，而是依赖于InvocationHandler的实现类LogHandler类，在代理方法中，以反射的方式，通过调用InvocationHanler对象的invoke方法，实现代理方法的调用委派。
    3. 采用工厂模式封装代理对象的创建过程

       1. 定义一个获得代理对象的静态方法

          1. getStaticProxy(TargetInter target)；
          2. 参数类型是业务接口

       2. 根据传递进来的目标对象，首先创建InvocationHandler对象，然后再创建代理类对象；

13. Proxy类对象实现了代理目标的所有接口，并代替目标对象进行实际的操作，代理的目的是在目标对象方法的基础上作增强，这种增强的本质通常就是对目标对象的方法进行拦截。所以，Proxy应该包括一个方法拦截器，来指示当拦截到方法调用时作何种处理。InvocationHandler就是拦截器的接口。