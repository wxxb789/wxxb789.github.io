* Servlet 的生命周期

是由 servlet 的容器来控制的。 分为 3
个阶段：初始化阶段、运行阶段、销毁阶段。
* JSP 和 Servlet 有哪些相同点和不同点，他们之间的联系是什么

JSP 是 Servlet 技术的扩展，本质上是 Servlet
的简易方式，更强调应用的外表表达。JSP 编译后是”类 servlet”。 Servlet 和
JSP 最主要的不同点在于，Servlet 的应用逻辑是在 Java
文件中，并且完全从表示层中的 HTML 里分离开来。

而 JSP 的情况是 Java 和 HTML 可以组合成一个扩展名为.jsp 的文件。 JSP
侧重于视图，Servlet 主要用于控制逻辑。
* 四种会话跟踪技术会话作用域

ServletsJSP 页面描述 page
否是代表与一个页面相关的对象和属性。一个页面由一个编译好的 Java servlet
类（可以带有任何的 include 指令，但是没有 include 动作）表示。这既包括
servlet 又包括被编译成 servlet 的 JSP 页面 request 是是代表与 Web
客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个
Web 组件（由于 forward 指令和 include 动作的关系） session
是是代表与用于某个 Web 客户机的一个用户体验相关的对象和属性。一个 Web
会话可以也经常会跨越多个客户机请求 application 是是代表与整个 Web
应用程序相关的对象和属性。这实质上是跨越整个 Web
应用程序，包括多个页面、请求和会话的一个全局作用域
* doGet 方法和 doPost 方法中的两个参数是什么？

HttpServletRequest 和
HttpServletResponse，前者封装了与请求相关的信息，后者封装了与响应相关的信息。要获取请求信息，从第一个参数获取，要对用户响应，通过第二个参数。
* 获取用户信息：

request 的 getParameter 方法（获取单个值）和 getParameterValues
方法（获取多个值），前者用于获取单值表单元素的值，或者用于获取多值的情况，典型的复选框。前者返回的是一个字符串，后者返回的是字符串数组。如果参数指定的表单元素不存在，返回
null。
* 要给用户响应信息，如何完成？

设置响应内容的类型：response.setContentType("text/html;charset=utf-8");
获取输出流对象：PrintWriter out = response.getWriter(); 输出信息：通过
out 的 println 方法
* Servlet API 中 forware()和 redirect()的区别？

a、浏览器显示

重定向会改变 URL 地址，请求转发不会改变 URL 地址。

b、资源共享

重定向不可以资源共享，请求转发可以。

c、功能

重定向可以用 URL 绝对路径访问其他 Web 服务器的资源，而请求转发只能在一个
Web 应用程序内进行资源转发，即服务器内部的一种操作。

d、效率

重定向效率低，相当于再一次请求；请求转发效率相对较高，跳转仅发生在服务器端。
* request.getParameter()和 request.getAttribute()的区别？

a、request.getParameter()获取的类型是 String；

request.getAttribute()获取的类型是 Object

b、request.getPrameter()获取的是 POST/GET 传递的参数值和 URL 中的参数；

request.getAttribute()获取的是对象容器中的数据值/对象

c、request.setAttribute()和 request.getAttribute()可以发送、接收对象；

request.getParamter()只能接收字符串，官方不开放
request.setParamter()（也就是没有这个方法）

setAttribute()和 getAttribute()的传参原理：

setAttribute()是应用服务器把这个对象放在该页面所对应的一块内存中去，当你的页面服务器重定向到另外一个页面时，

应用服务器会把这块内存拷贝到另一个页面所对应的那块内存中。这个就可以通过
getAttribute()获取到相应的参数值或者对象。
* JSP 共有以下 6 种基本动作：

jsp:include：在页面被请求的时候引入一个文件。
jsp:useBean：寻找或者实例化一个 JavaBean。 jsp:setProperty：设置
JavaBean 的属性。 jsp:getProperty：输出某个 JavaBean 的属性。
jsp:forward：把请求转到一个新的页面。 jsp:plugin：根据浏览器类型为 Java
插件生。
* 转发与重定向

RequestDispatcher rd = request,getRequestDispatcher("目标文件");
rd.forward(request,response); 如果使用 sendRedirect 方法
response.sendRedirect("目标文件");

RequestDispatcher 的 forward
方法相当于=<jsp:forward>=的作用。类似于方法调用，当执行到这行代码的时候，通过
forward 方法转向执行目标文件，把 request 和 response
作为参数传递到下一个页面，这样当前页面（Servlet 或者
JSP）和目标页面共享了 request，可以通过 request 对象传值。response 的
sendRedirect
方法相当于向客户端浏览器发送了一个消息，让浏览器重新请求目标文件，从用户的角度来说，相当于发送了两次请求，每次请求有独立的
request 和 response 对象，不能通过 request
在两个页面之间传值。从地址栏看，前一种方式在地址栏中显示的第一个文件的路径，后一种方式显示的第二个文件的路径。
* 在 servlet 和 jsp 之间能共享 session 对象么？

当然可以， HttpSession session = request.getSession(true);
session.putValue("variable",”value”);
* JSP 的四种范围？

a、page 是代表一个页面相关的对象和属性。一个页面由一个编译好的 java
servlet 类（可以带有 include 指令，但不可以带有 include
动作）表示。这既包括 servlet 又包括编译成 servlet 的 jsp 页面。

b、request 是代表与 web
客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个
web 组件（由于 forware 指令和 include 动作的关系）

c、session 是代表与用于某个 web
客户机的一个用户体验相关的对象和属性。一个 web
回话也可以经常跨域多个客户机请求。

d、application 是代表与整个 web
应用程序相关的对象和属性。这实质上是跨域整个 web
应用程序，包括多个页面、请求和回话的一个全局作用域。
* JSP 如何处理运行时异常（run-time）exception？

答：可是使用页面的 errorPaga
属性捕捉没有处理的运行时异常，然后自动转向到一个错误处理页面，代码如下：

<%[cite/t:@page] errorPage="错误页面 URL"%>

如果在页面请求时出现运行时异常时，以上代码会将代码转向到错误页面，在错误页面里面，可以通过以下代码定义这个页面是错误处理页面：

<%[cite/t:@page] isErrorPage="true"%>

这样描述错误信息的 Throwable 对象就可以在错误页面里面访问到。
* 在 JSP 页面中如何删除一个 cookie？

<% Cookie cookie=new Cookie("cookie 名"，"cookie 值");
cookie.setMaxAge(0); cookie.setPath("/"); response.addCookie(cookie); %>
* get 和 post 请求的区别？

①get 请求用来从服务器上获得资源，而 post 是用来向服务器提交数据；

②get 将表单中数据按照 name=value 的形式，添加到 action 所指向的 URL
后面，并且两者使用”?"连接，而各个变量之间使用"&“连接；post
是将表单中的数据放在 HTTP 协议的请求头或消息体中，传递到 action 所指向
URL；

③get 传输的数据要受到 URL 长度限制（1024 字节即 256 个字符）；而 post
可以传输大量的数据，上传文件通常要使用 post 方式；

④ 使用 get
时参数会显示在地址栏上，如果这些数据不是敏感数据，那么可以使用
get；对于敏感数据还是应用使用 post；

⑤get 使用 MIME 类型 application/x-www-form-urlencoded 的 URL
编码（也叫百分号编码）文本的格式传递参数，保证被传送的参数由遵循规范的文本组成，例如一个空格的编码是”%20”。

补充：GET 方式提交表单的典型应用是搜索引擎。GET
方式就是被设计为查询用的。
* JSP 有 9 个内置对象

- request：封装客户端的请求，其中包含来自 GET 或 POST 请求的参数；
- response：封装服务器对客户端的响应；
- pageContext：通过该对象可以获取其他对象；
- session：封装用户会话的对象；
- application：封装服务器运行环境的对象；
- out：输出服务器响应的输出流对象；
- config：Web 应用的配置对象；
- page：JSP 页面本身（相当于 Java 程序中的 this）；
- exception：封装页面抛出异常的对象。
* 存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。

- 0: 请求未初始化
- 1: 服务器连接已建立
- 2: 请求已接收
- 3: 请求处理中
- 4: 请求已完成，且响应已就绪
* 重定向

Servlet 重定向使用 ServletResponse 接口的方法是：sendRdirect()
* 一句话简答

- Servlet 配置参数保存在 =ServletConfig()= 对象中，一个 Servlet
  的配置对象 =不能=被其他 Servlet 访问

- MIME：ServletResponse 中响应正文的默认 MIME 是=text/plain=，而
  HttpServletResponse 中 的响应正文默认 MIME 是=text/html=

- 所有的 Servlet 都要实现两个接口之一：=Servlet=或者=HttpServlet=

- HTTP 是一种=无状态=协议

- 会话跟踪技术有：=Cookie=，=url重写=，=隐藏表单域=

- JSP 内置对象：=request=,=page=,=session=,=application=

- JSP 的 include
  动作组件的基本语法：=<jsp:include page="file" flush="true" />=

- JSP 除了 HTML 意外还有：脚本元素（Script
  Element），指令（Directive），动作（Action）

- JSP 三种指令：=page=,=include=,=taglib=

- JavaBean 的生命周期，有四种：=page=,=request=,=session=,=application=
  ** JavaBean 在标记=<jsp:useBean>=中用=Scope=属性声明 JavaBean
  的生命周期范围

- Java 类成为 JavaBean
  要满足：=每个属性都有set方法=，=每个属性都有get方法=，=不带参数的构造函数=

- ResultSet
  有三个获取流的方法：=getBinaryStream()=,=getAsciiStream()=,=getUnicodeStream()=

- JDBC 支持的三种 Statement
  对象：=Statement=,=PrepareStatement=,=CallableStatement=
* JSP 一些基本语法
