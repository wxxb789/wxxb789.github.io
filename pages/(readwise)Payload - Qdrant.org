:PROPERTIES:
:title: (readwise)Payload - Qdrant
:END:

:PROPERTIES:
:author: [[qdrant.tech]]
:full-title: "Payload - Qdrant"
:category: [[articles]]
:url: https://qdrant.tech/documentation/concepts/payload/
:image-url: https://qdrant.tech/images/social_preview.png
:END:

* Highlights first synced by [[Readwise]] [[2023-12-05]]
** ðŸ“Œ
#+BEGIN_QUOTE
â€¢   [](https://qdrant.tech/documentation/concepts/search/)
â€¢   [Filtering](https://qdrant.tech/documentation/concepts/filtering/)
â€¢   [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/)
â€¢   [Storage](https://qdrant.tech/documentation/concepts/storage/)
â€¢   [Indexing](https://qdrant.tech/documentation/concepts/indexing/)
â€¢   [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)

[Guides](https://qdrant.tech/documentation/guides/administration/)

â€¢   [Administration](https://qdrant.tech/documentation/guides/administration/)
â€¢   [Installation](https://qdrant.tech/documentation/guides/installation/)
â€¢   [Distributed deployment](https://qdrant.tech/documentation/guides/distributed_deployment/)
â€¢   [Quantization](https://qdrant.tech/documentation/guides/quantization/)
â€¢   [Telemetry](https://qdrant.tech/documentation/guides/telemetry/)
â€¢   [Monitoring](https://qdrant.tech/documentation/guides/monitoring/)
â€¢   [Configuration](https://qdrant.tech/documentation/guides/configuration/)
â€¢   [Security](https://qdrant.tech/documentation/guides/security/)

[Tutorials](https://qdrant.tech/documentation/tutorials/)

â€¢   [Configure Optimal Use](https://qdrant.tech/documentation/tutorials/optimize/)
â€¢   [Configure Multitenancy](https://qdrant.tech/documentation/tutorials/multiple-partitions/)
â€¢   [Bulk Upload Vectors](https://qdrant.tech/documentation/tutorials/bulk-upload/)
â€¢   [Simple Neural Search](https://qdrant.tech/documentation/tutorials/neural-search/)
â€¢   [Aleph Alpha Search](https://qdrant.tech/documentation/tutorials/aleph-alpha-search/)
â€¢   [Troubleshooting](https://qdrant.tech/documentation/tutorials/common-errors/)

[Integrations](https://qdrant.tech/documentation/integrations/langchain/)

â€¢   [LangChain](https://qdrant.tech/documentation/integrations/langchain/)
â€¢   [LlamaIndex](https://qdrant.tech/documentation/integrations/llama-index/)
â€¢   [DocArray](https://qdrant.tech/documentation/integrations/docarray/)
â€¢   [Haystack](https://qdrant.tech/documentation/integrations/haystack/)
â€¢   [txtai](https://qdrant.tech/documentation/integrations/txtai/)
â€¢   [FiftyOne](https://qdrant.tech/documentation/integrations/fifty-one/)
â€¢   [Cohere](https://qdrant.tech/documentation/integrations/cohere/)
â€¢   [OpenAI](https://qdrant.tech/documentation/integrations/openai/)
â€¢   [Aleph Alpha](https://qdrant.tech/documentation/integrations/aleph-alpha/)

[Examples](https://qdrant.tech/documentation/examples/)

Support

[Community links](https://qdrant.tech/documentation/community-links/)

[Release notes](https://github.com/qdrant/qdrant/releases)

  
Docs version: v1.3.x

[](https://qdrant.tech/documentation/concepts/payload#payload)Payload

One of the significant features of Qdrant is the ability to store additional information along with vectors. This information is called `payload` in Qdrant terminology.

Qdrant allows you to store any information that can be represented using JSON.

Here is an example of a typical payload:

    {
        "name": "jacket",
        "colors": ["red", "blue"],
        "count": 10,
        "price": 11.99,
        "locations": [
            {
                "lon": 52.5200, 
                "lat": 13.4050
            }
        ],
        "reviews": [
            {
                "user": "alice",
                "score": 4
            },
            {
                "user": "bob",
                "score": 5
            }
        ]
    }
    

[](https://qdrant.tech/documentation/concepts/payload#payload-types)Payload types

In addition to storing payloads, Qdrant also allows you search based on certain kinds of values. This feature is implemented as additional filters during the search and will enable you to incorporate custom logic on top of semantic similarity.

During the filtering, Qdrant will check the conditions over those values that match the type of the filtering condition. If the stored value type does not fit the filtering condition - it will be considered not satisfied.

For example, you will get an empty output if you apply the [range condition](https://qdrant.tech/documentation/concepts/payload/../filtering#range) on the string data.

However, arrays (multiple values of the same type) are treated a little bit different. When we apply a filter to an array, it will succeed if at least one of the values inside the array meets the condition.

The filtering process is discussed in detail in the section [Filtering](https://qdrant.tech/documentation/concepts/payload/../filtering).

Letâ€™s look at the data types that Qdrant supports for searching:

[](https://qdrant.tech/documentation/concepts/payload#integer)Integer

`integer` - 64-bit integer in the range from `-9223372036854775808` to `9223372036854775807`.

Example of single and multiple `integer` values:

    {
        "count": 10,
        "sizes": [35, 36, 38]
    }
    

[](https://qdrant.tech/documentation/concepts/payload#float)Float

`float` - 64-bit floating point number.

Example of single and multiple `float` values:

    {
        "price": 11.99,
        "ratings": [9.1, 9.2, 9.4]
    }
    

[](https://qdrant.tech/documentation/concepts/payload#bool)Bool

Bool - binary value. Equals to `true` or `false`.

Example of single and multiple `bool` values:

    {
        "is_delivered": true,
        "responses": [false, false, true, false]
    }
    

[](https://qdrant.tech/documentation/concepts/payload#keyword)Keyword

`keyword` - string value.

Example of single and multiple `keyword` values:

    {
        "name": "Alice",
        "friends": [
            "bob",
            "eva",
            "jack"
        ]
    }
    

[](https://qdrant.tech/documentation/concepts/payload#geo)Geo

`geo` is used to represent geographical coordinates.

Example of single and multiple `geo` values:

    {
        "location": {
            "lon": 52.5200,
            "lat": 13.4050
        },
        "cities": [
            {
                "lon": 51.5072,
                "lat": 0.1276
            },
            {
                "lon": 40.7128,
                "lat": 74.0060
            }
        ]
    }
    

Coordinate should be described as an object containing two fields: `lon` - for longitude, and `lat` - for latitude.

[](https://qdrant.tech/documentation/concepts/payload#create-point-with-payload)Create point with payload

REST API ([Schema](https://qdrant.github.io/qdrant/redoc/index.html#tag/points/operation/upsert_points))

httppython

    PUT /collections/{collection_name}/points
    
    {
        "points": [
            {
                "id": 1,
                "vector": [0.05, 0.61, 0.76, 0.74],
                "payload": {"city": "Berlin", "price": 1.99}
            },
            {
                "id": 2,
                "vector": [0.19, 0.81, 0.75, 0.11],
                "payload": {"city": ["Berlin", "London"], "price": 1.99}
            },
            {
                "id": 3,
                "vector": [0.36, 0.55, 0.47, 0.94],
                "payload": {"city": ["Berlin", "Moscow"], "price": [1.99, 2.99]}
            }
        ]
    }
    

    from qdrant_client import QdrantClient
    from qdrant_client.http import models
    
    client = QdrantClient(host="localhost", port=6333)
    
    client.upsert(
        collection_name="{collection_name}",
        points=[
            models.PointStruct(
                id=1,
                vector=[0.05, 0.61, 0.76, 0.74],
                payload={
                    "city": "Berlin", 
                    "price": 1.99,
                },
            ),
            models.PointStruct(
                id=2,
                vector=[0.19, 0.81, 0.75, 0.11],
                payload={
                    "city": ["Berlin", "London"], 
                    "price": 1.99,
                },
            ),
            models.PointStruct(
                id=3,
                vector=[0.36, 0.55, 0.47, 0.94],
                payload={
                    "city": ["Berlin", "Moscow"], 
                    "price": [1.99, 2.99],
                },
            ),
        ]
    )
    

[](https://qdrant.tech/documentation/concepts/payload#update-payload)Update payload[](https://qdrant.tech/docu 
#+END_QUOTE
    date:: [[2023-07-03]]
*** from _Payload - Qdrant_ by qdrant.tech
*** [View Highlight](https://read.readwise.io/read/01h4d9cw7pf0dw590fe8s6vgx0)
** ðŸ“Œ
#+BEGIN_QUOTE
payload 
#+END_QUOTE
    date:: [[2023-07-03]]
*** from _Payload - Qdrant_ by qdrant.tech
*** [View Highlight](https://read.readwise.io/read/01h4d9gexc7ttv5403dhtemz8g)