:PROPERTIES:
:title: readwise/Search - Qdrant
:END:


* metadata
:PROPERTIES:
:author: [[qdrant.tech]]
:full-title: "Search - Qdrant"
:category: [[articles]]
:url: https://qdrant.tech/documentation/concepts/search/
:image-url: https://qdrant.tech/images/social_preview.png
:END:

* Highlights first synced by [[Readwise]] [[2023-12-22]]
** ðŸ“Œ [[2023-07-03]]
#+BEGIN_QUOTE
[](https://qdrant.tech/documentation/concepts/search#similarity-search)Similarity search

Searching for the nearest vectors is at the core of many representational learning applications. Modern neural networks are trained to transform objects into vectors so that objects close in the real world appear close in vector space. It could be, for example, texts with similar meanings, visually similar pictures, or songs of the same genre. 
#+END_QUOTE\
** ðŸ“Œ [[2023-07-03]]
#+BEGIN_QUOTE
[](https://qdrant.tech/documentation/concepts/search#metrics)Metrics

There are many ways to estimate the similarity of vectors with each other. In Qdrant terms, these ways are called metrics. The choice of metric depends on vectors obtaining and, in particular, on the method of neural network encoder training.

Qdrant supports these most popular types of metrics:

â€¢   Dot product: `Dot` - [https://en.wikipedia.org/wiki/Dot_product](https://en.wikipedia.org/wiki/Dot_product)
â€¢   Cosine similarity: `Cosine` - [https://en.wikipedia.org/wiki/Cosine_similarity](https://en.wikipedia.org/wiki/Cosine_similarity)
â€¢   Euclidean distance: `Euclid` - [https://en.wikipedia.org/wiki/Euclidean_distance](https://en.wikipedia.org/wiki/Euclidean_distance) 
#+END_QUOTE\
** ðŸ“Œ [[2023-07-03]]
#+BEGIN_QUOTE
Qdrant counts this metric in 2 steps, due to which a higher search speed is achieved. The first step is to normalize the vector when adding it to the collection. It happens only once for each vector.

The second step is the comparison of vectors. In this case, it becomes equivalent to dot production - a very fast operation due to SIMD. 
#+END_QUOTE\
** ðŸ“Œ [[2023-07-03]]
#+BEGIN_QUOTE
Query planning

Depending on the filter used in the search - there are several possible scenarios for query execution. Qdrant chooses one of the query execution options depending on the available indexes, the complexity of the conditions and the cardinality of the filtering result. This process is called query planning.

The strategy selection process relies heavily on heuristics and can vary from release to release. However, the general principles are:

â€¢   planning is performed for each segment independently (see [storage](https://qdrant.tech/documentation/concepts/search/../storage) for more information about segments)
â€¢   prefer a full scan if the amount of points is below a threshold
â€¢   estimate the cardinality of a filtered result before selecting a strategy
â€¢   retrieve points using payload index (see [indexing](https://qdrant.tech/documentation/concepts/search/../indexing)) if cardinality is below threshold
â€¢   use filterable vector index if the cardinality is above a threshold

You can adjust the threshold using a [configuration file](https://github.com/qdrant/qdrant/blob/master/config/config.yaml), as well as independently for each collection. 
#+END_QUOTE\
** ðŸ“Œ [[2023-07-03]]
#+BEGIN_QUOTE
Values under the key `params` specify custom parameters for the search. Currently, it could be:

â€¢   `hnsw_ef` - value that specifies `ef` parameter of the HNSW algorithm.
â€¢   `exact` - option to not use the approximate search (ANN). If set to true, the search may run for a long as it performs a full scan to retrieve exact results. 
#+END_QUOTE\