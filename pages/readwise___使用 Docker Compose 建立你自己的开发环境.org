:PROPERTIES:
:title: readwise/使用 Docker Compose 建立你自己的开发环境
:END:


* metadata
:PROPERTIES:
:author: [[咸糖 - 自律者自由]]
:full-title: "使用 Docker Compose 建立你自己的开发环境"
:category: [[articles]]
:url: https://vim0.com/post/docker-compose-dev/
:image-url: https://vim0.com/apple-touch-icon.png
:END:

* Highlights first synced by [[Readwise]] [[2023-12-22]]
** 📌 [[2022-12-15]]
#+BEGIN_QUOTE
什么是 docker-compose

Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。使用 Compose，您可以使用 YAML 文件来配置应用程序的服务。然后，使用一个命令，您可以从您的配置中创建并启动所有服务。 
#+END_QUOTE\
** 📌 [[2022-12-15]]
#+BEGIN_QUOTE
也就是只需要简单的一句 `docker-compose up` 就可以启动项目中所依赖的相关服务，例如数据库、缓存、微服务等。 
#+END_QUOTE\
** 📌 [[2022-12-15]]
#+BEGIN_QUOTE
公司仓库的 private 库

工作中用 `Golang` 的时候经常会被各种私有库所挡住，比如 `Github`、`Gitlab`、`Gitee` 等。 其实这个很简单，就是当发现 `go mod download` 下不来的时候，可以尝试改写你的 COMMAND 然后进到容器中进行排查。

对于用来自己开发的 Dockerfile，其实可以使用 `.netrc` 的方式来解决这个问题。 参见这个回答：

`https://stackoverflow.com/questions/65824786/building-go-apps-with-private-gitlab-modules-in-docker` 
#+END_QUOTE\
** 📌 [[2022-12-15]]
#+BEGIN_QUOTE
编写 compose 的配置文件

Compose 有两个重要的概念：

•   **services**，这是一个 `map`，里面的 key 是容器的名字，value 是容器的配置。
•   **projects**，由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。

可见，一个项目可以由多个服务 (容器) 关联而成，Compose 面向项目进行管理。 
#+END_QUOTE\
** 📌 [[2022-12-15]]
#+BEGIN_QUOTE
网络隔离

对于网络的联通，我们可以使甼 `docker network create --driver bridge your_network` 创建一个网络，然后把容器挂载到这个网络中。

docker compose 也可以定义网络，但是需要注意的是，如果你的网络是自己创建的，那么你需要在 `docker-compose.yml` 中指定网络的名称。

docker 是建议使用自己建立的网络，而不是使用默认的网络。

在这个 network 下的容器，docker 提供了 DNS lookup service。 
#+END_QUOTE\
** 📌 [[2022-12-15]]
#+BEGIN_QUOTE
常用的最佳实践使用多阶段构建

使用多阶段构建，只会用最后一个阶段的来构建镜像，可以留下一个更加精简的 image-镜像 
#+END_QUOTE\
** 📌 [[2022-12-15]]
#+BEGIN_QUOTE
调整 Dockerfile 的顺序，因为每一个步骤发生变化后，后面的步骤的缓存都会废纸，所以将变动较大的放在后面比较好。

下面的格式就是，当你改动了一个 py 文件中的一行代码，其实每次 docker build 都会把下边的依赖下载的缓存废弃，所以改动较大的放在后面。 
#+END_QUOTE\