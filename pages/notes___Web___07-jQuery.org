

* jQuery介绍

jQuery是javascript的一个框架包, 其实就是对javascript的代码进行了封装,
进而简化了对javascript的操作。

=jQuery = javascript + query=

使用前期, jQuery侧重快速查找(query)页面的各个节点
后期jQuery丰富了事件操作、 ajax操作、 DOM操作等等。
* jQuery选择器

是指jQuery获取页面的节点对象的方式; 格式都是: =$()=
** 1. 基本选择器


1. =$("#id属性值"):= 获取指定id属性值的节点对象(获取的是单个节点)

2. =$("标签名"):= 获取指定标签名的所有节点对象(获取的的是多个数组)

3. =$(".class属性值"):=
   获取指定class属性值的所有节点对象(获取的的是多个数组)

4. =$("*"):= 通配符选择器, 获取页面所有=节点对象=(数组)

5. =$("s1, s2, s3"):= 联合选择器, 获取s1、 s2和s3节点对象(数组)
** 2. 层次选择器


1. =$("s1 s2")=: 获取s1节点内部所有的s2节点(不光是s1的直接子节点s2,
   是s1节点内部的所有s2)

2. =$("s1 . s2")=: 获取s1节点的所有直接子节点s2

3. =$("s1 + s2")=: 获取s1节点之后的第一个s2弟弟节点（并列关系）

4. =$("s1 ~ s2")=: 获取s1节点之后的所有s2弟弟节点（并列关系）

标签名选择器、 id选择器、 class选择器都能指定层次关系。
** 3. 并且选择器:(条件选择器)


1. =$("s1:first")=: 获取s1节点且是第一个

2. =$("s1:last")=: 获取s1节点且是最后一个

3. =$("s1:eq(i)")=: 获取s1节点且是第i角标个(即第i+1个s1节点)

4. =$("s1:gt(i)")=: 获取s1节点且是角标大于i的(即第i+1个之后的所有s1)

5. =$("s1:lt(i)")=: 获取s1节点且是角标小于i的(即第i+1个之前的所有s1)

6. =$("s1:even")=: 获取s1节点且是偶数角标的(0 2 4 6...角标)

7. =$("s1:odd")=: 获取s1节点且是奇数角标的(1 3 5 7...角标)

8. =$("s1:not(s2)")=: 获取s1节点且除了s2条件以外的

并且关系的多个选择器没有前后顺序要求， 但是要避免出现语法歧义。
** 4. 并且选择器的其它用法


1. =$(":header")=: 表示所有的标题标签

2. =$(":header.h")=: class属性是h的所有标题标签

3. =$("li#d")=: id值是d的所有li标签

4. =$("li:gt(2):lt(2)")=: 角标大于2且小于5的li标签
   注意:不是=$("li:gt(2):lt(5)")=,
   因为在执行完="li:gt(2)"=之后表示拿到的是 角标大于2的所有li,
   此时又重新给此3个li从0开始指定的角标, 所以要 再获取孙权之前的li,
   就是=":lt(2)"=, 所以是=$("li:gt(2):lt(2)")=
** 5. 内容并且选择器


1. =$("s1:contains(内容)")=: 获取s1节点且是包含指定内容的s1

2. =$("s1:empty")=: 获取s1节点且内容是空的s1

3. =$("s1:has(s2)")=: 获取s1节点且包含节点s2的s1

4. =$("s1:parent")=: 获取s1节点且是作为父节点的s1
** 6. 表单域(单选按钮 复选框 下拉框)选中选择器


1. =$(":checked")=: 复选框、 单选按钮选中选择器

2. =$(":selected")=: 下拉框选中选择器
** 7. 属性选择器

#+begin_example
    $("[attrName]") //  表示具有指定名称属性的节点对象
    $("[attrName=value]") //  表示具有指定名称属性且属性值为value的节点对象
    $("[attrName^=value]") //  表示具有指定名称属性且属性值以value开始的节点对象
    $("[attrName$=value]") //  表示具有指定名称属性且属性值以value结尾的节点对象
    $("[attrName!=value]") //  表示具有指定名称属性且属性值不等于value的节点对象; 或 没有指定名称属性的节点对象
    $("[attrName][attrName!=value]") //  表示具有指定名称属性且属性值不等于value的节点对象
    $("[attrName*=value]") //  表示具有指定名称属性且属性值包含value的节点对象
#+end_example
* 标签属性操作


1. =$().attr(属性名)=: 获取节点对象的指定属性值

2. =$().attr(属性名， 属性值)=: 给节点对象的指定属性赋值或改值

3. =$().removeAttr(属性名)=: 删除节点对象的指定属性

4. =$().attr(json对象)=: 给节点对象的多个属性同时赋值或改值，
   json对象的键值对就是属性名和属性值

5. =$().attr(属性名， function)=:
   通过函数的返回值给节点对象的指定属性赋值或改值。

6. 标签class属性的快捷操作方法:
   说明:html中其实一个标签的class属性是可以有多个值的,
   多个属性值之间使用空格分隔

   1. =$().addClass(属性值)=: 给指定节点对象的class属性追加属性值

   2. =$().removeClass(属性值)=:
      将指定节点对象的class属性的参数属性值删除

   3. =$().toggleClass(属性值)=:
      如果节点对象的class属性有参数属性值就删除参数属性值,
      如果没有就给节点对象的 class属性添加参数属性值(开关效果)

7. 标签value属性快捷操作方法:

   1. =$().val()=: 获取指定节点对象的value属性值
   2. =$().val(值)=: 给指定节点对象的value属性赋值或修改值
   3. =$().val([值1, 值2…])=: 将value值是[] 中的值的复选框、 单选按钮、
      下拉框的选项选中
* 标签文本内容操作


1. =$().html()=: 获取节点对象的文本内容,
   以及将其子标签也当做文本内容获取
2. =$().html(文本)=: 给节点对象添加或修改文本内容, 如果文本内容含有标签,
   则浏览器当做标签解析
3. =$().text()=: 获取节点对象以及其所有子标签的文本内容,
   其子标签不会当文本内容获取
4. =$().text(文本)=: 给节点对象添加或修改文本内容, 如果文本内容包含标签,
   浏览器不会将其当做标 签解析, 只是当做文本显示。
* 标签css样式操作


1. =$().css(属性名)=: 获取节点对象的css样式的指定的属性值

2. =$().css(属性名， 值)=:
   给节点对象的css样式添加或修改指定的属性的值(本质是给节点对象的style属性
   添加或修改css属性)

3. =$().css(json对象)=: 给节点对象的css样式同时添加或修改多个属性的值,
   json对象的键值对就是css
   样式的属性名和属性值(本质也是给节点对象的style属性添加或修改css属性)
* jQuery对象和dom对象的转换


1. jQuery对象: =$("#id属性值")=、 =$(".class属性值")=、
   =$("标签名")=等选择器拿到的是jQuery的对象

   dom对象: =document.getElementById()=、
   =document.getElementsByTagName()= 等方法拿到的是dom对象

2. jQuery对象是不能直接操作dom对象的,
   dom对象也是不能直接操作jQuery对象的

3. dom对象就是jQuery对象的数组元素,
   将jQuery对象转成dom对象就是从数组对象中获取指定角标的元素

将dom对象转成jQuery对象就是使用$(dom对象)
将参数dom对象封装到jQuery对象中。
* jQuery的对象类型

=$()= 其实就是个函数, 此函数还可以使用jQuery() 表示
** 1. jQuery对象

就是 =$("#id属性值")= 、 =$(".class属性值")= 、 =$("标签名")= 等通过
=$()= 方法返回值获取的对象。 即第一种对象就是 =$()= 或者 =jQuery()=
函数执行后的返回值对象; =$().css();= =$().html();= 是在调用 =$()= 或者
=jQuery()= 函数返回值对象的方法;
** 2. =$= 对象

=$= 符号本身就是个对象, 是个函数对象。
而$函数对象内部又定义了很多成员函数。 即第二种对象就是 `$=或者=jQuery=函数对象本身这个对象;=$.get()` 、 `$.ajax()=、=$.post()`  `jQuery.get()` 、 `jQuery.ajax()` 、 `jQuery.post()` 是在调用 `$=或者=jQuerys函数对象`
本身自己的方法
* =each()= 方法的使用

each() 方法用于遍历数组、 对象以及jQuery对象

1. 遍历数组: =$.each(数组， function(数组角标， 元素) {});=

2. 遍历对象: =$.each(对象， function(对象属性名， 对象属性值) {});=

3. 遍历jQuery对象: =$().each(function(角标， dom对象) {});=
* jQuery操作加载事件

** 1. js操作加载事件

#+begin_example

  < body onload = "函数()" > window.onload = function() {};
#+end_example
** 2. jQuery操作加载事件

#+begin_example

  1. $(document).ready(function() {});
  2. $().ready(function() {});
  3. $(function() {});
#+end_example
** 3. Js操作加载事件和jQuery操作加载事件的区别


1. 设置个数不同

在同一页面中, js的加载事件只能设置一个, 因为js的加载事件本质都是给
window对象的onload事件属性赋值, 多次设置就是多次赋值, 后者会覆盖前者。
而在同一页面中, 可以设置多个jQuery的加载事件, 因为jQuery是把每个加载
事件都看做数组元素存储到数组中, 执行时就会遍历该数组执行每个元素,
即每个加载事件。

2. 执行时机不同

js的加载事件是页面全部内容(文字、 图片、 样式等)在浏览器显示完毕之后
再执行加载事件的。 而jQuery的加载事件是, 只要页面全部内容(文字、 图片、
样式等)在内存中 对应的DOM树结构绘制完毕就执行,
而可能对应的页面内容在浏览器中还没有 显示。
所以jQuery的加载事件先于js的加载事件执行。

3. jQuery加载事件的原理
   jQuery的加载事件并不是对window对象的onload事件的封装, 而是对
   DOMContentLoaded事件的封装:
   =document.addEventListener("DOMContentLoaded", function() {});=
* jQuery对事件的操作

** 1. =$().事件方法(事件处理函数);=

给指定节点对象设置事件
** 2. =$().事件方法();=

触发指定节点对象的事件
** 3. 常用事件方法

#+begin_example
  1. blur(fn): 给指定节点对象添加blur事件
  2. change(fn): 给指定节点对象添加change事件
  3. click(fn): 给指定节点对象添加click事件
  4. focus(fn): 给指定节点对象添加focus事件
  5. mouseover(fn): 给指定节点对象添加mouseover事件
  6. mouseout(fn): 给指定节点对象添加mouseout事件
  7. keyup(fn): 给指定节点对象设置keyup事件
  8. keydowm(fn): 给指定节点对象设置keydown事件
  9. submit(fn): 给表单设置submit事件
#+end_example
** 4. jQuery还可以给节点对象进行事件的绑定来给其添加事件


1. =$().bind(事件类型， 事件处理函数)=: 给指定节点对象绑定指定事件
2. =$().bind(事件类型1 事件类型2 事件类型3...， 事件处理函数)=:
   给指定节点对象同时绑定多个事件， 且多个事件绑定同一处理函数
3. =$().bind(json对象)=: 给指定节点对象同时绑定多个事件，
   json对象键是事件类型， 值是事件处理函数

事件类型:click、 mouseover、 mouseout、 focus、 blur等等
事件处理函数:可以是匿名函数也可以是具有名称的函数。
** 5. 取消事件绑定


1. =$().unbind()=: 取消指定节点对象所绑定的全部事件
2. =$().unbind(事件类型)=: 取消指定节点对象所绑定的指定类型事件
3. =$().unbind(事件类型， 事件处理函数)=:
   取消指定节点对象所绑定的指定类型事件所绑定的指定事件处理函数
   (必须是具有名称的事件处理函数)
* jQuery操作html文档

#+begin_example

  对html文档的各个节点对象进行增删改查操作
#+end_example
** 1. 添加节点

*** 1.1. 父子节点添加


1. 主动添加:

   =$().append(子节点)=: 向当前节点尾部添加参数子节点

   =$().prepend(子节点)=: 向当前点起始位置添加参数子节点

2. 被动添加:

   =$().appendTo(父节点)=: 将当前子节点添加到参数父节点的尾部

   =$().prepeandTo(父节点)=: 将当前子节点添加到参数父节点起始位置
*** 1.2. 兄弟节点添加：


1. 主动添加：

   =$().after(content)=: 向当前节点的后面添加参数兄弟节点

   =$().before(content)=: 向当前节点的前面添加参数兄弟节点

2. 被动添加：

   =$().insertAfter(节点)=: 将当前节点添加到参数兄弟节点之后

   =$().insertBefore(节点)=: 将当前节点添加到参数兄弟节点之前
** 2. 替换节点（移动并覆盖）


1. =$().replaceAll(节点)=: 使用当前节点去替换参数节点
2. =$().replaceWith(节点)=: 将当前节点被参数节点替换
** 3. 删除节点


1. =$().empty()=: 将当前节点的所有子节点清空
2. =$().remove()=: 删除当前节点
** 4. 复制节点


1. =$().clone(true)=: 复制当前节点， 节点和节点事件都复制
2. =$().clone(false)=: 复制当前节点， 只复制节点不复制节点事件
* jQuery事件绑定

** 1. jQuery事件的简单操作是


1. =$().事件方法(事件处理函数)=: 给指定节点对象添加指定事件
2. =$().事件方法()=： 触发指定节点对象的事件
** 2. jQuery还可以给节点对象进行事件的绑定来给其添加事件


1. =$().bind(事件类型，事件处理函数)=: 给指定节点对象绑定指定事件
2. =$().bind(事件类型1  事件类型2  事件类型3…，事件处理函数)=:
   给指定节点对象同时绑定多个事件，且多个事件绑定同一处理函数
3. =$().bind(json对象)=:
   给指定节点对象同时绑定多个事件，json对象键是事件类型，值是事件处理函数

事件类型:click、mouseover、mouseout、focus、blur等等
事件处理函数:可以是匿名函数也可以是具有名称的函数。
* 取消事件绑


1. =$().unbind()=: 取消指定节点对象所绑定的全部事件
2. =$().unbind(事件类型)=: 取消指定节点对象所绑定的指定类型事件
3. =$().unbind(事件类型，事件处理函数)=:
   取消指定节点对象所绑定的指定类型事件所绑定的指定事件处理函数
   (必须是具有名称的事件处理函数)
* jQuery封装的ajax

** 1.
=$.get(url  [ ,param]  [ ,function(data){ }回调函数]  [ ,dataType])=方法


1. 参数一: 请求资源路径
2. 参数二: 向服务器传递的请求数据，字符串和json对象都可以设置请求数据
3. 参数三: 回调函数，ajax请求处理完整后调用该函数，函数参数data表示
   服务器向客户端响应的数据
4. 参数四: 服务器向浏览器响应的数据的类型，值可以是html、text、xml、json

*说明:*

1. 参数二、三、四都是可选的
2. 参数四不写时，默认表示服务器给浏览器响应的数据是文本字符串
3. 当参数四的值是html或text时，浏览器会将服务器响应的数据当做字符串
   文本处理；
4. 当参数四的值是xml时，浏览器会将服务器响应的数据封装到
   document对象中；
5. 当参数四的值是json时，浏览器会将服务器响应的数 据转成json对象。
** 2.
=$.post(url  [ ,param]  [ ,function(data){ }回调函数]  [ ,dataType])=方法


1. 参数一: 请求资源路径
2. 参数二: 向服务器传递的请求数据，字符串和json对象都可以设置请求数据
3. 参数三:
   回调函数，ajax请求处理完整后调用该函数，函数参数data表示服务器向客户端响应的数据
4. 参数四: 服务器向浏览器响应的数据的类型，值可以是html、text、xml、json

*说明:*

1. 参数二、三、四都是可选的
2. 参数四不写时，默认表示服务器给浏览器响应的数据是文本字符串
3. 当参数四的值是html或text时，浏览器会将服务器响应的数据当做字符串
   文本处理；
4. 当参数四的值是xml时，浏览器会将服务器响应的数据封装到
   document对象中；
5. 当参数四的值是json时，浏览器会将服务器响应的数 据转成json对象。
** 3. =$.ajax()=

#+begin_example
  $.ajax({
       "url" : xxx,
       "data" : xxx,
       "type" : xxx,
       "success" : function(data){  参数表示服务器响应数据   },
       "error" : function(){    },
       "dataType" : xxx
      })
#+end_example

*说明:*

1. =ajax()=方法参数是json对象
2. =url=表示请求资源路径
3. =data=表示请求参数
4. =type=表示请求方式
5. =success=表示请求成功回调函数
6. =error=表示请求异常回调函数
7. =dataType=表示服务器响应数据格式