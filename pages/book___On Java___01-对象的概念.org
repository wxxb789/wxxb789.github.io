#+title:     对象的概念

面向对象编程（Object-Oriented Programming OOP）是一种编程思维方式和编码架构。

* 抽象
问题的复杂度直接取决于抽象的类型和质量。这里的 =类型= 意思是：抽象的内容是什么？

汇编语言是对底层机器的轻微抽象。

命令式语言（如 FORTRAN，BASIC 和 C）是对汇编语言的抽象。
与汇编相比，这类语言已有了长足的改进，但它们的抽象原理依然要求我们着重考虑计算机的结构，而非问题本身的结构。

程序员必须要在机器模型（“解决方案空间”）和实际解决的问题模型（“问题空间”）之间建立起一种关联。这个过程既费精力，又脱离编程语言本身的范畴。

** 对象
一个对象具有自己的 =状态=, =行为=, =标识= 。
这意味着对象有自己的内部数据（提供状态），
方法（产生行为），并彼此区分（每个对象在内存中都有唯一地址）。

** 纯OOP的特点
1. 万物皆对象
2. 程序是一组对象，通过消息传递来通知彼此做什么
3. 每个对象都有自己的存储空间，可容纳其他对象
4. 每个对象都有一个类型
5. 同一个类型的所有对象都能接受相同的信息

* 接口
定义类，进而得到许多对象。随后对象作为要解决问题中存在的元素进行处理。
对象：方便将“问题空间”与“方案空间”中的元素一一对应起来。

#+begin_quote
通常，UML只关注类名，数据成员，公共方法。
#+end_quote

* 服务提供
对象可以看成是“服务提供者”。
把问题一一分解，抽象成一组服务。
** 软件设计的基本原则是：

1. 高内聚：每个组件内部作用明确，功能紧密相关
2. 低耦合：避免一个对象塞进太多功能，让每个对象功能单一且高效，又利于复用，以及可读性。

* 封装
职责划分清晰，相互协作。
设定访问控制可以预防内部实现细节暴露，错误使用，错误修改。

** 使用访问控制的原因
1. 让程序员不要碰触他们不该碰触的部分。
2. 让类库的创建者在不影响使用者的情况下完善更新类库。

** Java 的访问控制

1. =public= ：任意访问。
2. =protected= ：确保子类可以访问。
3. =default= ：包访问，可以被同一包中其他类成员访问。
4. =private= ：类本身和类内部方法可以访问。

* 复用

#+begin_quote
组合和聚合都属于关联关系的一种，只是额外具有整体-部分的意义。至于是聚合还是组合，需要根据实际的业务需求来判断。可能相同超类和子类，在不同的业务场景，关联关系会发生变化。只看代码是无法区分聚合和组合的，具体是哪一种关系，只能从语义级别来区分。聚合关系中，整件不会拥有部件的生命周期，所以整件删除时，部件不会被删除。再者，多个整件可以共享同一个部件。组合关系中，整件拥有部件的生命周期，所以整件删除时，部件一定会跟着删除。而且，多个整件不可以同时共享同一个部件。这个区别可以用来区分某个关联关系到底是组合还是聚合。两个类生命周期不同步，则是聚合关系，生命周期同步就是组合关系。
#+end_quote

** 组合 Composition
表示“拥有”的关系（has-a relationship）

** 聚合 Aggregation
动态的组合
