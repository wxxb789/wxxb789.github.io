:PROPERTIES:
:title: readwise/You Have So Many Cool Id...
:END:

:PROPERTIES:
:author: [[CohereAI on Twitter]]
:full-title: "You Have So Many Cool Id..."
:category: [[tweets]]
:url: https://twitter.com/CohereAI/status/1639266541505052676
:image-url: https://pbs.twimg.com/profile_images/1650250832909152260/760DZ0cv.png
:END:

* Highlights first synced by [[Readwise]] [[2023-12-18]]
** üìå
#+BEGIN_QUOTE
You have so many cool ideas for building LLM-powered applications. If only there were a faster way to build and test them out. ‚ö°

Good news ‚Äî you can do that with Cohere and @LangChainAI. Let‚Äôs see how. (Thread) 

![](https://pbs.twimg.com/media/Fr_YO39XwAAL_Wo.png) 
#+END_QUOTE
    date:: [[2023-04-13]]
*** from _You Have So Many Cool Id..._ by @CohereAI on Twitter
*** [View Tweet](https://twitter.com/CohereAI/status/1639266541505052676)
** üìå
#+BEGIN_QUOTE
@LangChainAI With Cohere, you get access to large language models (LLMs) via a simple API without needing the machine learning know-how.

You get two key types of language processing capabilities ‚Äî text generation and text embedding ‚Äî each served by a different family of models. 

![](https://pbs.twimg.com/media/Fr_YPPoWIAMkTTp.png) 
#+END_QUOTE
    date:: [[2023-04-13]]
*** from _You Have So Many Cool Id..._ by @CohereAI on Twitter
*** [View Tweet](https://twitter.com/CohereAI/status/1639266547930738688)
** üìå
#+BEGIN_QUOTE
@LangChainAI With Langchain, it‚Äôs fast and easy to combine LLMs with other sources of computation or knowledge.

You can quickly put together an end-to-end application via its wide range of modules. 

![](https://pbs.twimg.com/media/Fr_YPiTWcAEDnDS.png) 
#+END_QUOTE
    date:: [[2023-04-13]]
*** from _You Have So Many Cool Id..._ by @CohereAI on Twitter
*** [View Tweet](https://twitter.com/CohereAI/status/1639266554507407360)
** üìå
#+BEGIN_QUOTE
@LangChainAI Let‚Äôs use a simple example involving multilingual semantic search.

First, what is semantic search?

It gives you search capabilities based on contextual meaning and solves the limitations of the alternative method, which is keyword search. 
#+END_QUOTE
    date:: [[2023-04-13]]
*** from _You Have So Many Cool Id..._ by @CohereAI on Twitter
*** [View Tweet](https://twitter.com/CohereAI/status/1639266556264710146)
** üìå
#+BEGIN_QUOTE
@LangChainAI Meanwhile, with multilingual search, you can search across multiple languages.

But this typically involves creating individual pipelines for each language, making it costly to build.

With Cohere‚Äôs multilingual embedding model, you need just one model to handle 100+ languages. 
#+END_QUOTE
    date:: [[2023-04-13]]
*** from _You Have So Many Cool Id..._ by @CohereAI on Twitter
*** [View Tweet](https://twitter.com/CohereAI/status/1639266557246226433)
** üìå
#+BEGIN_QUOTE
@LangChainAI When talking about multilingual search, more precisely there are two types: multilingual and cross-lingual.

With Cohere‚Äôs multilingual embedding model, you can do both. 

![](https://pbs.twimg.com/media/Fr_YQErWwAoW6OS.png) 
#+END_QUOTE
    date:: [[2023-04-13]]
*** from _You Have So Many Cool Id..._ by @CohereAI on Twitter
*** [View Tweet](https://twitter.com/CohereAI/status/1639266562401026048)
** üìå
#+BEGIN_QUOTE
@LangChainAI Now let‚Äôs get to our example.¬†

We‚Äôll create a semantic search pipeline for searching the most relevant documents from a list of documents.

We‚Äôll see how the model does at cross-lingual search. 

![](https://pbs.twimg.com/media/Fr_YQYPWYAYhmHY.png) 
#+END_QUOTE
    date:: [[2023-04-13]]
*** from _You Have So Many Cool Id..._ by @CohereAI on Twitter
*** [View Tweet](https://twitter.com/CohereAI/status/1639266567752908802)
** üìå
#+BEGIN_QUOTE
@LangChainAI Step 1: Import a List of Documents

First we import a dataset containing a list of questions from the Text REtrieval Conference (TREC) Question Classification dataset.

It contains 5,452 documents. Here are a few examples: 

![](https://pbs.twimg.com/media/Fr_YQu7WAAI6H6D.jpg) 
#+END_QUOTE
    date:: [[2023-04-13]]
*** from _You Have So Many Cool Id..._ by @CohereAI on Twitter
*** [View Tweet](https://twitter.com/CohereAI/status/1639266573033566214)
** üìå
#+BEGIN_QUOTE
@LangChainAI We can get the dataset from the publicly available Tensorflow Datasets library. 

![](https://pbs.twimg.com/media/Fr_YRABWIAg5exo.jpg) 
#+END_QUOTE
    date:: [[2023-04-13]]
*** from _You Have So Many Cool Id..._ by @CohereAI on Twitter
*** [View Tweet](https://twitter.com/CohereAI/status/1639266579673231365)
** üìå
#+BEGIN_QUOTE
@LangChainAI Step 2: Embed the Documents and Store Them in an Index

Next is where the magic happens. Using the multilingual-22-12 model, we turn the documents into text embeddings and store them in a database. Here, we use Chroma.

With Langchain, we can do that in just two lines of code. 

![](https://pbs.twimg.com/media/Fr_YRYIXoAk8LNm.jpg) 
#+END_QUOTE
    date:: [[2023-04-13]]
*** from _You Have So Many Cool Id..._ by @CohereAI on Twitter
*** [View Tweet](https://twitter.com/CohereAI/status/1639266586128203783)
** üìå
#+BEGIN_QUOTE
@LangChainAI Step 3: Enter a Query

We enter a new search query: ‚ÄúHow to get in touch with Bill Gates.‚Äù

Now, in the dataset, there are three items that contain ‚ÄúBill Gates‚Äù, but none contains ‚Äúget in touch.‚Äù A traditional keyword search can‚Äôt easily distinguish the most relevant one. 

![](https://pbs.twimg.com/media/Fr_YRw7WAAIrWbH.jpg) 
#+END_QUOTE
    date:: [[2023-04-13]]
*** from _You Have So Many Cool Id..._ by @CohereAI on Twitter
*** [View Tweet](https://twitter.com/CohereAI/status/1639266591303954437)
** üìå
#+BEGIN_QUOTE
@LangChainAI However, with semantic search, we should expect to get  ‚ÄúWhat is Bill Gates of Microsoft email address?‚Äù as the most similar one because ‚Äúget in touch‚Äù and ‚Äúemail address‚Äù imply a similar intent. 
#+END_QUOTE
    date:: [[2023-04-13]]
*** from _You Have So Many Cool Id..._ by @CohereAI on Twitter
*** [View Tweet](https://twitter.com/CohereAI/status/1639266592608452612)
** üìå
#+BEGIN_QUOTE
@LangChainAI But let‚Äôs not stop there. The multilingual model can also perform well at cross-lingual tasks. So, we‚Äôll enter the same query in three other languages: French, Hindi, and Indonesian. 

![](https://pbs.twimg.com/media/Fr_YSHpXgAY_Sx8.jpg) 
#+END_QUOTE
    date:: [[2023-04-13]]
*** from _You Have So Many Cool Id..._ by @CohereAI on Twitter
*** [View Tweet](https://twitter.com/CohereAI/status/1639266597364805634)
** üìå
#+BEGIN_QUOTE
@LangChainAI Step 4: Return the Document Most Similar to the Query

Now, we take the query and pass through Langchain‚Äôs similarity_search method to get the document most similar to the query. 

![](https://pbs.twimg.com/media/Fr_YSabXwAA5-Xs.jpg) 
#+END_QUOTE
    date:: [[2023-04-13]]
*** from _You Have So Many Cool Id..._ by @CohereAI on Twitter
*** [View Tweet](https://twitter.com/CohereAI/status/1639266602205036545)
** üìå
#+BEGIN_QUOTE
@LangChainAI And below are the results for the query in the four languages. It successfully finds the most semantically similar document to the query. 

![](https://pbs.twimg.com/media/Fr_YSukWIAUKe4D.jpg) 
#+END_QUOTE
    date:: [[2023-04-13]]
*** from _You Have So Many Cool Id..._ by @CohereAI on Twitter
*** [View Tweet](https://twitter.com/CohereAI/status/1639266607707873284)
** üìå
#+BEGIN_QUOTE
@LangChainAI In that example, we saw an example of building:
1 - A cross-lingual semantic search engine using just one embedding model (Cohere)
2 - A complete pipeline in just a few lines of code (Langchain) 
#+END_QUOTE
    date:: [[2023-04-13]]
*** from _You Have So Many Cool Id..._ by @CohereAI on Twitter
*** [View Tweet](https://twitter.com/CohereAI/status/1639266609205325825)
** üìå
#+BEGIN_QUOTE
@LangChainAI Now, what if we wanted to use semantic search to answer questions about a document?¬†

It could be a long-form document, such as an article, or even multi-page documents, such as a docs website. 
#+END_QUOTE
    date:: [[2023-04-13]]
*** from _You Have So Many Cool Id..._ by @CohereAI on Twitter
*** [View Tweet](https://twitter.com/CohereAI/status/1639266610153242629)
** üìå
#+BEGIN_QUOTE
@LangChainAI That‚Äôs an example of search-based question answering, combining text embedding and text generation.

We show an example of that in our blog post: https://t.co/L2C8pAnd2y 
#+END_QUOTE
    date:: [[2023-04-13]]
*** from _You Have So Many Cool Id..._ by @CohereAI on Twitter
*** [View Tweet](https://twitter.com/CohereAI/status/1639266611096895493)