:PROPERTIES:
:title: readwise/1_N 大佬提到飞冰 https:__t.co_...
:END:


* metadata
:PROPERTIES:
:author: [[imsobear on Twitter]]
:full-title: "1/N 大佬提到飞冰 https://t.co/..."
:category: [[tweets]]
:url: https://twitter.com/imsobear/status/1763055473161535871
:image-url: https://pbs.twimg.com/profile_images/413937787654504448/wzXzqFfy.jpeg
:END:

* Highlights first synced by [[Readwise]] [[2024-02-29]]
** 📌 [[2024-02-29]]
#+BEGIN_QUOTE
1/n 大佬提到飞冰 https://t.co/cHQy29gBVi 了，同时又提到交给新同学负责后会好很多（之前是我负责），不确定是在喷飞冰还是在喷我（可能都是？），总之还是简单回应下，也借这个机会梳理下飞冰的发展。  即便有些人喜欢阴阳怪气，我还是对事不对人吧，只讲飞冰，不讲人（合作过的心里都有谱）。 

![](https://pbs.twimg.com/media/GHef1gBa8AAN1xb.jpg) 
#+END_QUOTE\
** 📌 [[2024-02-29]]
#+BEGIN_QUOTE
2/n 先回答包皮的问题，飞冰有一段时间的确是把 fusion 组件（类似 antd）包了一层，包皮的原因主要是 fusion 早期不稳定加上当时也不流行锁版本，再之后飞冰开源的时候 fusion 还没开源所以只能包一层。包一层当然很不优雅的，维护成本认知成本都高，所以包的这一层好几年前我已经彻底推动去掉了。 
#+END_QUOTE\
** 📌 [[2024-02-29]]
#+BEGIN_QUOTE
3/n 虽然说包一层确实不优雅，但当时借着飞冰服务的内外业务场景，我们跟 fusion 团队的合作是很紧密的，也帮助 fusion 完善了不少关键能力，比如组件样式的按需加载、如何更好的维护组件层面的 reset CSS 以及各种主题定制的 feature。 
#+END_QUOTE\
** 📌 [[2024-02-29]]
#+BEGIN_QUOTE
4/n 为什么说基础组件从来不是飞冰的核心能力，飞冰整体有四个大的阶段：

1. 服务内部后端同学，物料/脚手架/文档/培训，我负责
2. 开源服务相对初阶的前端同学，GUI 工具/物料/脚手架，于江水负责
3.  对齐内外部目标，服务专业前端，框架/微前端，我负责
4. 从 2022 到现在有一些挣扎，后面细说 
#+END_QUOTE\
** 📌 [[2024-02-29]]
#+BEGIN_QUOTE
5/n 可以看到即便从 2 -> 3 这个阶段飞冰定位发生了不小的变化，但无论之前还是之后飞冰的核心都不是基础组件。这个转变是痛苦的，但按照当时内部的发展飞冰定位上就是要更多服务专业前端，所以也不得不放弃了 GUI 工具以及建设的物料，事实上这两个思路当下在社区以及其他公司依然有很不错的影响力。 

![](https://pbs.twimg.com/media/GHej4XMaYAAVcwM.png) 
#+END_QUOTE\
** 📌 [[2024-02-29]]
#+BEGIN_QUOTE
6/n 在放弃独立客户端之后我们尝试围绕 VS Code 去做可视化的辅助工具，之后还尝试过在浏览器里打开一个可视化页面（这个思路在 Umijs 的某个版本以及后面 Nuxt Devtools 都有看到），但坦白讲从结果上来讲相比独立客户端还是差了很多，这个阶段飞冰在社区里也是不温不火，我自己那段时间也挺挣扎的。 
#+END_QUOTE\
** 📌 [[2024-02-29]]
#+BEGIN_QUOTE
7/n 包括物料也是，虽然飞冰是比较早期做这个事情的项目，但我一直觉得做的不够好，过多的追求量而非精，维护过组件的人都清楚这玩意看起来很简单但维护成本很高（依赖&写法升级）同时也有很多并不简单的技术问题（比如项目跟物料的版本匹配），前端体系变化太快导致要维护好一套物料的成本着实不低。 
#+END_QUOTE\
** 📌 [[2024-02-29]]
#+BEGIN_QUOTE
8/n 当时国内社区也出现了多个通过卖 Pro 模板商业化的项目，运作的都还挺好，我认为是有受到飞冰影响的😂。所以 GUI 因为定位变化而放弃，物料因为过多关注了量而人力又有限最终没持续搞下去，这两个相对领先的思路没能持续耕耘也挺遗憾的，如果当时拿着这两个核心思路+培训去创业感觉挺有搞头的 😆 
#+END_QUOTE\
** 📌 [[2024-02-29]]
#+BEGIN_QUOTE
9/n 基础组件上层物料的目标问题在大多数团队都存在，基本都是轰轰烈烈搞一波，然后后面持续维护升级跟不上，相对来说飞冰团队在这个事情上坚持的时间还算久的。

放弃掉 GUI 工具和物料之后，我们开始投入将原先的工程工具升级到应用框架的思路，以及结合内部的业务场景抽象了微前端的方案。 
#+END_QUOTE\
** 📌 [[2024-02-29]]
#+BEGIN_QUOTE
10/n 工程能力其实是基础，但是开源那个阶段对这块关注太少了，只是把 webpack 配置集成下能 start/build 就行，而 Nextjs 已经发展的不错了，所以主要就是跟着 Nextjs 以及后面 Remix 的思路在做，中间也有一些微创新但都很难变成核心竞争力，同时微前端方案也有不错的落地，但这块有多卷懂得都懂。 
#+END_QUOTE\
** 📌 [[2024-02-29]]
#+BEGIN_QUOTE
11/n 还有回复里提到的社区这块，我重新接手之后虽然社区这块不温不火，但我自己还是花费了不少精力去做内外部的答疑，当时用过的小伙伴应该都有印象。

这大概就是第三个阶段的历程了，第一个阶段服务内部就不讲了，第二个阶段是于江水负责的他应该有文章讲过，接下来再讲讲第四个阶段。 
#+END_QUOTE\
** 📌 [[2024-02-29]]
#+BEGIN_QUOTE
12/n 第四个阶段大概从 2021 年底算起吧，这个阶段基本是内部为主了，先是推了中后台和跨端底层的工程能力统一，后面又推动决策了跨端场景也用 React，应用框架统一到 icejs，接着我就离职然后把这块交给我非常优秀的师弟了，直到现在我跟飞冰团队都保持着持续的沟通交流。🩷 
#+END_QUOTE\
** 📌 [[2024-02-29]]
#+BEGIN_QUOTE
13/n 为什么说这个阶段挣扎，主要还是阿里整体的发展影响的，核心问题是一线负责人的决策空间比较小，同时整体投入的资源（人才）不断变少，因此想要做一些事情要担忧很多问题。对比之下，字节在这方面好了很多，因此也孵化出了像 Rspack 这样优秀的项目（当然也有很多垃圾产品就不说了）。 
#+END_QUOTE\
** 📌 [[2024-02-29]]
#+BEGIN_QUOTE
14/n 不夸张的说 Rspack 就是我想象中「在大公司里做开源产品的最好状态」，有资源投入、有技术深度、有核心竞争力，定位上也清晰，当然这不仅是有投入的问题，整个团队的优秀更为关键。🫡

顺着这个再说下开源，国内大厂的开源产品被喷的挺多的，这里面有做的不好的地方，同时社区普遍也太过严苛了。 
#+END_QUOTE\
** 📌 [[2024-02-29]]
#+BEGIN_QUOTE
15/n 站在开源团队的视角，开源往往是为了影响力、让产品更好的演进，除此之外还有一个作用是对社区的帮助，即便产品有一天不维护了，有没有对社区产生正向的影响和帮助，如果有，我觉得就是值得的。毫无疑问飞冰有做到，2018 年，GUI 开发工具、模板区块，点两下就可以搭起一个简单的项目，还挺酷的。 
#+END_QUOTE\
** 📌 [[2024-02-29]]
#+BEGIN_QUOTE
16/16 离开之后我就从架构转到业务了，架构做太久了，加上视野打开之后，有的事情能看到差距但没有赶超路径，有的事情觉得不靠谱没啥意思（比如低代码这种🤦‍♂️），倒是业务做的还蛮开心的，至少很实在。同时我其实也刻意的有淡出社区，以了解学习为主，结果今天不小心被 Q 到了，所以就啰嗦这么一堆。✋ 
#+END_QUOTE\