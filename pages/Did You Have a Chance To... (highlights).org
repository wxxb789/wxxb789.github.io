:PROPERTIES:
:title: Did You Have a Chance To... (highlights)
:author: [[mjovanovictech on Twitter]]
:full-title: "Did You Have a Chance To..."
:category: [[tweets]]
:url: https://twitter.com/mjovanovictech/status/1663788472858017794
:END:

* Highlights first synced by [[Readwise]] [[2023-05-31]]
** Did you have a chance to work with the Outbox pattern?

If you're working with microservices, this is something to add to your toolkit.

So what is it?

The Outbox pattern is a solution for reliably publishing events in a distributed system. 

![](https://pbs.twimg.com/media/Fxb2zGOWwAEpZzs.png) ([View Tweet](https://twitter.com/mjovanovictech/status/1663788472858017794))
** Instead of publishing events directly, the Outbox pattern involves storing events in a separate table in your database.

And then having a background process read from that table and publish the events to a message broker. ([View Tweet](https://twitter.com/mjovanovictech/status/1663788475911401473))
** Why would you ever want to introduce this sort of complexity?

Well, if you're working with distributed systems, you surely know that things break.

A downstream service is down.

The network isn't available. ([View Tweet](https://twitter.com/mjovanovictech/status/1663788477714972674))
** If you couple your application requests with notifying other services, directly calling them, or publishing a message to the queue, you are introducing a potential issue.

The Outbox pattern is used to solve the problem of ensuring that events are published reliably. ([View Tweet](https://twitter.com/mjovanovictech/status/1663788479430492160))
** In a distributed system, it's common to have multiple services that need to be updated when an event occurs.

For example, if a user updates their profile, you might need to update multiple services with that new data. ([View Tweet](https://twitter.com/mjovanovictech/status/1663788481238249474))
** Using the Outbox pattern, you can ensure that those updates happen reliably, even if some services are temporarily unavailable.

If you're working with a SQL database, for example, you know that your transaction is atomic. ([View Tweet](https://twitter.com/mjovanovictech/status/1663788482999775232))
** You can reliably persist your message to the Outbox table and have a background worker process that message at a later time.

One of the key benefits of the Outbox pattern is that it helps you to ensure consistency in your distributed system. ([View Tweet](https://twitter.com/mjovanovictech/status/1663788484753084421))
** By using a separate table to store events, you can be sure that events are published at least once and that they are published in the correct order. ([View Tweet](https://twitter.com/mjovanovictech/status/1663788486338510855))
** Another benefit is that the Outbox pattern is generally easy to implement and can be used with any message broker or queueing system. ([View Tweet](https://twitter.com/mjovanovictech/status/1663788488037216256))
** Plus, it can help you improve your system's performance and scalability by decoupling the act of publishing events from the rest of your application logic.

You can also add retries for failed messages and try to publish them again later. ([View Tweet](https://twitter.com/mjovanovictech/status/1663788489807110146))
** Of course, the Outbox pattern only handles the publishing side of things.

On the consumer, you still need to think about duplicate messages in case of retries. ([View Tweet](https://twitter.com/mjovanovictech/status/1663788491442888705))
** P.S. If you want to learn more about .NET and software architecture, consider subscribing to my newsletter.

→ Join 22.000+ engineers here: https://t.co/zcETFCDreZ ([View Tweet](https://twitter.com/mjovanovictech/status/1663788493171052545))
** If you enjoyed this Tweet thread, then:

→ Follow me @mjovanovictech for weekly tips like this.
→ RT the first tweet to share it with other engineers. ([View Tweet](https://twitter.com/mjovanovictech/status/1663788494903205889))