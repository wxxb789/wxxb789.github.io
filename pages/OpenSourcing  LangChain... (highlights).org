:PROPERTIES:
:title: OpenSourcing  LangChain... (highlights)
:END:
:PROPERTIES:
:author: [[BezdekJuraj on Twitter]]
:full-title: "OpenSourcing  LangChain..."
:category: [[tweets]]
:url: https://twitter.com/BezdekJuraj/status/1667774691904307201
:END:

* Highlights first synced by [[Readwise]] [[2023-06-11]]
** OpenSourcing  LangChain Decorators‚ú®
the syntactic sugar üç≠ for @LangChainAI 

- turn any python function into LLMChain with a  decorator

- docstrings as prompt template, 
  (don't break your code indentation)

- auto output parsing based on return type

https://t.co/PYFFNeioj2 

![](https://pbs.twimg.com/media/FyUbnPWXwAAmAcz.jpg) ([View Tweet](https://twitter.com/BezdekJuraj/status/1667774691904307201))
** Main principles and benefits:

- pythonic way of writing code

- make use of IDE in-built support for hinting, type checking etc

- leverage the powerü¶úüîó LangChain ecosystem

- optional parameters 

- conditional rendering of prompt parts 

![](https://pbs.twimg.com/media/FyUf0aOXgAEQTOV.jpg) ([View Tweet](https://twitter.com/BezdekJuraj/status/1667774694496391169))
** Support for 

- async (just declare prompt as an async function)

- chat message templates

- automatic list, dict, pydantic output parsing (or use any langchain output parser)

.. and more 

![](https://pbs.twimg.com/media/FyUdWYkWYAEC9JB.jpg) ([View Tweet](https://twitter.com/BezdekJuraj/status/1667774696429846528))
** You can also bind the functions to a class and reference the object fields/properties inside the template

Very useful when creating complex chains like agents 

![](https://pbs.twimg.com/media/FyUedc_WAAMaXRT.jpg) ([View Tweet](https://twitter.com/BezdekJuraj/status/1667774699160367104))