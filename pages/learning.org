#+alias: lrn,

* [[lrn/list]]
* [[lrn/方法论]]
* 方法
** Goal 确定目标
** 模拟教学
- Reading
- Audiovisual
- Demonstration
- Discussion
- Practice Doing
- Teach Others
** Review 重复回顾
*** 重复前面的过程
*** 找盲区 -> 子目标
*** 找易混淆的部分 -> 子目标
** Simplify 概念简化
* Checklist 框架
** Background 背景知识
** Goal 目标
达成什么样的目标，解决了什么样的问题。
** What 是什么
明确概念，与背景知识建立联系。最终一句话为一个概念下定义。
** Purpose 目的，解决什么问题
问题，知识，技能，方法要解决什么问题。
问题会由抽象到具体，由整体到细节。由一般到特殊。
** Situation 适用场景
*** 业务场景
*** 技术场景
** Key Point 关键点
*** 核心思想
*** 核心组件
*** 底层原理
*** 关键的基础技术
** How 如果处理，描述过程
*** 实现的主要流程
（暂时忽略错误处理，corner case）
*** 关键的基础技术是怎样实现的
** Why 解释 how, situation 产生的疑问
*** 解释为什么具有这样的适用场景 situation
*** 解释为什么如此实现 how
** Verification or Proof 验证或证明
知识和技术往往都会有前提条件，有假设。尝试证明验证这些的正确性。
** Pros 优势
相应的 trade-off
** Cons 劣势
相应的 trade-off
** Comaparison 比较
与已有的其他技术进行比较
* 怎么做
** 大量收集资料，文本，书，视频
** 阅读整理，混乱到有序，分散到有关联
** 重新梳理，查漏补缺
** 实践，刻意练习
** 简化，第一性原则
* 实践
** Specific 具体目标
每个阶段都要由输出反馈。
** Measurable 可测量
目标实现的结果可测量，比如完成的百分比，结果的优良差。
取得成功进而获得奖励。
** Attainable 可达成，且由挑战
** Relevant 目标之间以及与最终目标有关联性
** Tiem-bound 有明确的时间启止，跨度要小
* 举一反三
** 联想
** 抽象
** 自省
左右互博，寻找漏洞
设定特殊场景，制造难题。
同一问题，找多种解，比较优劣。
对于一个解，找尽量多的测试案例，以覆盖更多的 corner case
* 总结归纳
把你看到和学习到的信息，归整好，排列好，关联好，总之把信息碎片给结构化掉，然后在结构化的信息中，找到规律，找到相通之处，找到共同之处，进行简化、归纳和总结，最终形成一种套路，一种模式，一种通用方法
* 阅读源码

代码 => what，how，details
书，稳当 => what, how, why
** 书
思想，原理，方法，思路，经验
** 代码
细节实现，性能
** 准备阅读源码
*** 基础知识
*** 软件功能
有什么功能，特性，配置项。
*** 相关文档
*** 代码组织结构
了解标准框架的代码结构，比如 spring 项目结构。
** 开始阅读源码
*** 代码的组成
**** 接口抽象定义
**** 模块粘合层
中间件 middleware，promisses 模式，回调 callback，代理委托，依赖注入
**** 业务流程
数据是怎么被传递和处理的。
**** 具体实现
***** 代码逻辑
业务逻辑，控制逻辑（flag等控制变量，多线程，异步，远程通讯，序列化反序列化）
详细看《编程范式游记》
***** 错误处理
***** 数据处理
DAO，DTO，JSON，XML
***** 重要算法
索引表算法，全局唯一ID，信息推荐，统计算法，通读算法（Gossip）
***** 底层交互
与OS，与JVM
**** 运行调试
** 总结
*** 自顶向下
*** 画图
流程图，调用时序图，模块组织图
*** 代码逻辑归类
排除杂音，找到主要逻辑
*** debug 跟踪代码
* 学习技巧
** 用不同方式来学同一个东西
看书，听课，写博客，将给别人，解决实际问题
** 不要被打断，专注
** 总结压缩信息
只关心关键点，用表格，图示，笔记来压缩信息
** 把未知关联到已知
** 用教的方法来学习
** 学以致用
** 不要记忆
用推导来代替
** 多犯错误