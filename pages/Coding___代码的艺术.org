* 代码的艺术


1. 技术

   1. 编码能力，数据结构，算法
   2. 系统结构，操作系统，计算机网络，分布式网络

2. 产品

   1. 对业务的理解
   2. 交互设计
   3. 产品数据统计
   4. 产品/业务运营

3. 研究和创新

   1. R&D：Research and Development

4. Coding的过程

   1. 从无序到有序
   2. 从现实世界中的问题到数字世界的模型
   3. 这是一个*认识*的过程
   4. 从未知到已知

5. 需要的能力

   1. *把握问题*的能力
   2. *建立模型*的能力
   3. *沟通协助*的能力
   4. *编码执行*的能力

6. 代码的品味

** 1. 什么是好的代码


1.  高效（Fast）
2.  鲁棒（Solid and Robust）
3.  简介（Maintainable and Simple）
4.  简短（Small）
5.  共享（Re-usable）
6.  可测试（Testable）
7.  可移植（Portable）
8.  可监控（Monitorable）
9.  可运维（Operational）
10. 可扩展（Scalable & Extensible）

一流代码的特性：

1. 正确与性能
2. 可读和可维护
3. 运维和运营
4. 共享和重用

反例：

1. 不专业的函数名，变量名
2. 没有注释：因为缺乏讲故事的能力
3. 函数具有过多功能
4. 差的代码排版
5. 难以测试

** 2. 好的代码从何而来


#+begin_quote
  代码不只是「写」出来的
#+end_quote

1. 需求分析，系统设计（编码前）
2. 编写代码，单元测试（编码中）
3. 集成测试，上线，持续运营/迭代改进（编码后）

*** 2.1. 编码前


#+begin_quote
  反例：1. 在没有搞清楚目标前就已经开始写代码。2.
  代码编写完成后才发现设计思路存在问题。

  前期更多的投入，收益往往最大
#+end_quote

#+begin_quote
  需求分析与系统设计的区别

  需求分析： 定义系统/软件*黑盒*的行为（从外部角度看）

  系统设计：
  设计系统/软件*白盒*的机制（从内部角度看，思考是怎么做出来的，以及为什么这么做）
#+end_quote

**** 2.1.1. 需求分析


#+begin_quote
  如何用寥寥数语*勾勒*出一个系统的功能？
#+end_quote

例如：GFS is designed to provide efficient, reliable access to data
using large clusters of commodity hardware.

怎样描述GFS的需求：

1. 分布式文件系统
2. 文件数量，文件大小的分布，总的存储容量（量变导致质变）
3. 读写能力（读写文件次数，数据传输速率，读写延迟）
4. 容错的能力，一致性方面的定位（强一致，弱一致）
5. 对外接口（用户怎样使用）

**** 2.1.2. 系统设计


#+begin_quote
  什么是系统架构？（System Architecture）：A system architecture is the
  conceptual model that defines the structure, behavior, and more views
  of a system.
#+end_quote

几个要素：

1. 系统要完成哪些功能
2. 系统如何组成
3. 功能在这些组成部分之间如何划分

系统设计的约束：

1. 计算资源
2. 存储资源
3. IO/网络资源

需求是系统设计决策的来源：在设计中，经常要做Trade-Off，而需求就是make
decision的重要依据。

系统设计的风格和哲学：

1. 在同样需求下，可能出现*不同的设计*：电信网络（中心控制，可靠组件） vs
   互联网（分布式控制，不可靠组件）RISC vs CISC
2. 每个组件（子系统/模块）的功能都因该足够的专注和单一：功能的单一是复用和扩展的基础
3. 子系统/模块之间的关系应该是简单而清晰的：软件中最复杂的是*耦合*（避免使用全局变量）

接口（Interface）：

1. 系统对外的*接口*，比系统实现本身还要更重要
2. 接口定义了*功能*
3. 接口决定了*外部关系*（相对于内部，外部关系确定后非常*难以更改*）

哪些是接口（Interface）：

1. 模块对外的*函数接口*
2. 平台对外的*API*（很多是RPC或Web API）
3. 系统间通信的*协议*
4. 系统间存在依赖的数据（比如：给另一个系统提供的词表）

设计和修改接口，需要考虑的非常清楚：

1. 合理，好用
2. 修改时需要尽量*向前兼容*

** 3. 代码也是一种表达方式


- 模块
- 数据类的模块
- 过程类的模块
- 模块的重要性
- 类和函数
- 关于=Object Oriented=
- 模块内部的组成
- 文件头的例子

*** 3.1. 编程规范


#+begin_quote
  目的：1. 看别人的代码和看自己的一样。2.
  看代码时能够专注于逻辑，而不是格式方面。3. Don't make me think
#+end_quote

#+begin_quote
  悖论：好的OOP需要对系统有深入了解然后才能设计出来，而面对问题一开始时，很难有足够的了解。
#+end_quote

1. 模块：程序的基本组成单位。高内聚，低耦合。切分模块的方法：

   1. 数据类：主要完成对数据的封装，对外提供明确的*数据访问接口*，*以数据为中心考虑问题*
   2. 过程类：不含数据（可以调用其他过程类模块，可以调用其他数据类模块），和类的成员变量无关的函数应该作为一个独立的函数，不建议实现为类的成员函数

2. 类和函数：两种不同的模型，有各自的适用范围
3. 面向对象：本质是数据的封装，Coding时应该从*数据*开始想问题（而不是执行过程）

模块内部的组成：

1. 文件头

   1. 模块的说明：模块的简要说明
   2. 修改历史：时间，修改人，修改内容

2. 模块

   1. 内容的顺序尽量一致（全局常量/全局变量/内部函数/外部可访问的函数/类的实现等）
      ## 4. 怎样写好的代码

*** 4.1. 函数


#+begin_quote
  函数的切分也要做到有明确单一的功能。
#+end_quote

1.  描述函数的三要素：

    1. 功能描述
    2. 传入参数描述：含义，限制条件
    3. 返回值的描述：有哪些可能性

2.  控制函数的规模：python（30行），C/C++（两屏）
3.  每个函数都应该有足够明确的语义：基于函数的语义，函数的返回值有*三种类型*

    1. *逻辑判断型*：布尔类型
    2. *操作型*：表示成功或者失败「OK」或「ERROR」（主要关注其副作用）
    3. *获取数据*：表示「有数据」或「无数据/获取数据失败」

4.  函数头：对函数的*语义*做出清晰和准确的说明（三要素）
5.  写*单入口*，*单出口*的函数
6.  代码块：一个函数内的代码实现

    1. 把代码的段落分清楚
    2. 形式的背后时逻辑（划分/层次）
    3. 空格/空行可以帮助理清代码内在的逻辑

7.  =Don't make me think=

    1. 一眼看去，如果无法看看请逻辑，那么不是好的代码
    2. 好的代码不需要思考太多
    3. 一定记住：*代码时写给别人看的*

8.  注释不是「补」出来的

    1. 可以尝试先写注释再写代码
    2. 在代码上表达不好，在其他表达上一般也存在问题（email，ppt，口头）

9.  命名：望名生义是目的，坏的命名会带来误解和歧义。*概念*是建立模型的出发点（概念，逻辑推理
    => 模型体系）

    1. 系统
    2. 子系统
    3. 函数
    4. 模块
    5. 变量/常量

10. 命名时常见的问题

    1. 名字不携带信息
    2. 名字携带的信息时错的

11. 好的命名

    1. 准确，易懂
    2. 需要经过反复*推敲*
    3. 下划线，驼峰

12. 系统时运营出来的

    1. 从运行时的监控开始慢慢迭代，因此代码的*可监测性*非常重要
    2. 没有足够的数据收集，系统等于没有上线
    3. *数据*和*功能*同等的重要
    4. 在设计和编码接端，就要考虑系统的运营
    5. 提供足够的状态记录
    6. 提供方便的对外接口

** 5. 怎样才能成为优秀的软件工程师

*** 5.1. 学习、思考与实践

学：

1. 书
2. 开源代码
3. 要有=hungary=和=foolish=的感觉
4. 忌井底之蛙，夜郎自大

思：

1. 学而不思则罔

做：

1. 知行合一谓之善
2. 所有的重要进步，都源自于失败和挫折的经历

*** 5.2. 知识、方法与精神


1. 只是学知识的热你，总是觉得世界变化太快（语言，系统）
2. 分析问题，解决问题的能力
3. Research：To Identify the Fundamental Problem, and Solve it.
4. To be or not to be
5. 人总是在神性和兽性间不断斗争，进步往往来自于对理想的追求
6. 对完美的不断追求

*** 5.3. 基础乃是治学之根本


#+begin_quote
  非宁静无以致远
#+end_quote

1. 数据结构，算法，操作系统，计算机网络
2. 软件工程，编程思想
3. 逻辑思维能力，归纳总结能力，表达能力
4. 研究能力，分析问题，解决问题

#+begin_quote
  不要忘记我们为什么出发。*改变世界*，而不是学习编程、炫耀技术
#+end_quote

** 6. Summary


1. 好代码的来源不是写好代码：好代码是一系列工作的结果（需求分析，系统设计，对系统的持续运营）
2. 代码是写给别人看的（别人看不懂的代码时失败的）

booklist：

1. Code Complete
2. Rapid Development
3. The Mythical Man-Month
4. 201 principles of software development
5. Computer Organization and Architecture
6. Operating System Internals and Principles
7. Operating Systems Design and Implementation
8. Computer Networks
9. TCP/IP Illustated

#+begin_quote
  *伟大的代码*永远是*伟大团队精神*的反映
#+end_quote
