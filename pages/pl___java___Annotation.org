* [06]Annotation

** 1. Built-in annotations

Java defines a set of annotations that are built into the language. Of
the seven standard annotations, three are part of java.lang, and the
remaining four are imported from java.lang.annotation.

*** 1.1. Annotations applied to Java code

@Override - Checks that the method is an override. Causes a compilation
error if the method is not found in one of the parent classes or
implemented interfaces. @Deprecated - Marks the method as obsolete.
Causes a compile warning if the method is used. @SuppressWarnings -
Instructs the compiler to suppress the compile time warnings specified
in the annotation parameters.

*** 1.2. Meta Annotations (Annotations applied to other annotations)

@Retention - Specifies how the marked annotation is stored, whether in
code only, compiled into the class, or available at runtime through
reflection. @Documented - Marks another annotation for inclusion in the
documentation. @Target - Marks another annotation to restrict what kind
of Java elements the annotation may be applied to. @Inherited - Marks
another annotation to be inherited to subclasses of annotated class (by
default annotations are not inherited to subclasses).

**** 1.2.1. Since Java 7, three additional annotations have been added
to the language.

@SafeVarargs - Suppress warnings for all callers of a method or
constructor with a generics varargs parameter, since Java 7.
@FunctionalInterface - Specifies that the type declaration is intended
to be a functional interface, since Java 8. @Repeatable - Specifies that
the annotation can be applied more than once to the same declaration,
since Java 8.
