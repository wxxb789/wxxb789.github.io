* [99]Command
** 1. 解决依赖
*** 1.1. 方法1

If you want to only download dependencies without doing anything else,
then it's: =mvn -U dependency:resolve= Or to download a single
dependency: =mvn dependency:get -Dartifact=groupId:artifactId:version=
If you need to download from a specific repository, you can specify that
with=-DrepoUrl=...=
*** 1.2. 方法2

=mvn dependency:purge-local-repository=
*** 1.3. 清理 target

=mvn clean -U=
*** 1.4. 清理该项目依赖的本地仓库中的 maven 包

=mvn dependency:purge-local-repository=这个命令会清理 pom.xml
中的包，并重新下载，但是并不清理不在 pom.xml 中的依赖包。

下面的扩展

=mvn dependency:purge-local-repository -DreResolve=false=

reResolve 是否重新解析依赖关系

=mvn dependency:purge-local-repository -DactTransitively=false -DreResolve=false=

actTransitively 是否应该对所有传递依赖性起作用。默认值为 true。

=mvn dependency:purge-local-repository -DactTransitively=false -DreResolve=false --fail-at-end=

忽略错误 =--fail-at-end= ）。
对于那些有一些依赖关系混乱的项目，或者依赖于一些内部的仓库这种情况发生），这样做有时是有用的。
*** 1.5. 清理 maven 本地仓库中下载失败的包


#+begin_quote
  很多时候, maven 工具帮我们下载 jar 包的时候, 由于种种原因,
  或断电、或蓝屏、或工具抽风等等等等情况导致我们下载 jar
  包失败，但此时工具已经在我们的 maven 仓库中创建了一个 jar
  包文件夹了，但是这个 jar 包是不完整的，也就是不能用的。
#+end_quote

#+begin_example
  set REPOSITORY_PATH=D:\maven\repository
  rem 正在搜索...
  for /f "delims=" %%i in ('dir /b /s "%REPOSITORY_PATH%\*lastUpdated*"') do (
      del /s /q %%i
  )
  rem 搜索完毕
  pause
#+end_example