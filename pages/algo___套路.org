* 套路
* Brute Force
* Sliding Window


如果字串 $s_{i,j}$ 从下标 $i$ 到下标 $j - 1$
已经检查过没有重复。我们只需要检查 $s[j]$ 是否已经在 $s_{i,j}$
内出现过。使用=HashSet=作为滑动窗口来检查是否重复，可以把时间复杂度从
$O(n)$ 降低到 $O(1)$ 。

滑动窗口是一个抽象概念，通常在数组或字符串这类问题上使用。窗口是数组或字符串的一个区间，通常由起始 =start= 和结束 =end= 定义。i.e. $[i,j)$（左闭右开区间）。于是，滑动窗口就是一个窗口向一个确定的方向"滑动"它的两个边界。i.e. 如果把
$[i,j)$ 向右滑动一个元素，那么就变成 $[i+1,j+j)$ （左闭右开）。

典型问题：寻找一个子区间，满足最长，最短，目标值这样的条件。

#+begin_src java
  public class SlidingWindow {
    public List<Integer> slidingWindowTemplateByHarryChaoyangHe(String s, String t) {
      //init a collection or int value to save the result according the question.
      List<Integer> result = new LinkedList<>();
      if (t.length() > s.length()) { return result; }
      //create a hashmap to save the Characters of the target substring.
      //(K, V) = (Character, Frequence of the Characters)
      Map<Character, Integer> map = new HashMap<>();
      for (char c : t.toCharArray()) {
        map.put(c, map.getOrDefault(c, 0) + 1);
      }
      //maintain a counter to check whether match the target string.
      int counter = map.size();//must be the map size, NOT the string size because the char may be duplicate.
      //Two Pointers: begin - left pointer of the window; end - right pointer of the window
      int begin = 0, end = 0;
      //the length of the substring which match the target string.
      int len = Integer.MAX_VALUE;
      //loop at the begining of the source string
      while (end < s.length()) {
        char c = s.charAt(end);//get a character
        if (map.containsKey(c)) {
          map.put(c, map.get(c) - 1);// plus or minus one
          if (map.get(c) == 0) {
            counter--;//modify the counter according the requirement(different condition).
          }
        }
        end++;
        //increase begin pointer to make it invalid/valid again
        while (counter == 0 /* counter condition. different question may have different condition */) {
          char tempc = s.charAt(begin);//***be careful here: choose the char at begin pointer, NOT the end pointer
          if (map.containsKey(tempc)) {
            map.put(tempc, map.get(tempc) + 1);//plus or minus one
            if (map.get(tempc) > 0) {
              counter++;//modify the counter according the requirement(different condition).
            }
          }
          /* save / update(min/max) the result if find a target*/
          // result collections or result int value
          begin++;
        }
      }
      return result;
    }
  }
#+end_src