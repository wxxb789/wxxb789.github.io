

* AOP常见概念
** 连接点 [[aop/JoinPoint]]
*** 目标类在执行过程中可以切入增强代码的位置；
*** 理论上有静态代码块，循环语句块，方法等程序执行位置；
*** Spring框架只支持方法类型的连接点，不支持其它类型；因此在Spring中，JoinPoint专指目标对象的执行方法。
** 切入点 [[aop/Pointcut]]
*** 连接点的表示方式，可以指定一个连接点或者多个连接点，通常使用AspectJ所定义的切入点表达式；
*** SpringIoC容器会根据配置，将切入点表达式封装成一个对象；
** 通知 [[aop/Advice]]
*** 通知代表横切逻辑，是切入连接点的增强代码，通常被定义在一个类的方法中或者被单独封装到一个类中，比如事务拦截器；
** 切面 [[aop/Aspect]]
*** Aspect=Advice+Pointcut;
*** 通知和切入点的组织与封装，SpringIoC容器根据切面，将Advice作用到相应的JoinPoint上；
*** SpringIoC容器会根据配置创建切面对象；但是切面对象通常依赖于一个普通类，即基于POJO的Aspect。
** 织入 [[aop/Weave]]
*** 在不侵入目标对象的业务方法的情况下，切入横切逻辑，即将附加的增强代码和目标对象的业务方法整合起来。
*** 通过代理对象实现织入，代理对象在其所依赖的InvocationHandler对象的invoke方法中将增强代码与业务代码实施整合。
*** Spring的IoC容器通过ProxyFactory，动态产生代理对象。由于ProxyFactory封装了复杂的织入过程，因此也被称为织入器(weaver)。
*** ProxyFactory产生代理对象的两种方式
**** 基于JDK(Proxy)的动态代理模式(默认方式)
      特点：目标类实现接口
**** 基于CGLIB(Code Generation Library)的动态字节码生成库
      特点：目标类不实现接口；通过子类继承，重写目标类的业务方法完成横切逻辑的织入；