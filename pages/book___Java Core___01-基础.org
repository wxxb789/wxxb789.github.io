* 1. 01-基础

#+begin_src java
  package src;
  import java.io.BufferedReader;
  import java.io.FileReader;
  import java.math.BigDecimal;
  import java.math.BigInteger;
  import java.util.Random;
  import java.util.Scanner;
  /*
   * import package or class
   * */
  /*
   * Only one public class could in one .java file
   * Class Declaration Syntax
   * <public/protected/default/private> class <class name> {
   *   data fields,
   *   constructors,
   *   function,
   *   all insdide here,
   * }
   *
   * */
  public class Learnjava {
      public static void main(String[] args) {
          /*
           * Output
           */
          System.out.println("integer" + 10 + "double" + 3.14 + "boolean" + true);
          System.out.print("hello" + "world");
          System.out.printf("pi = %.5f", Math.PI);
          /*
           * Input
           */
          Scanner scanner = new Scanner(System.in);
          /*
           * Variable Initialization
           *
           */
          int barInt = 1, barInt2, barInt3 = 1;
          /*
           * interpret a byte as an unsigned integer and signed integer
           */
          byte fooByte = (byte) 255;
          int unsignedIntLessThan256 = 0xff & fooByte;
          int signedInt = (int) fooByte;
          long fooLong = 1000000L;
          float fooFloat = 123.5f;
          double fooDouble = 123.4;
          boolean fooBoolean = true;
          boolean barBoolean = false;
          char fooChar = 'A';
          // final variables can't be reassigned
          final double E = 2.71828;
          // BigInteger (can be initialized using an array of bytes or a string) and
          // BigDecimal (Immutable, arbitrary-precision two parts signed decimal number)
          BigInteger fooBigInteger = new BigInteger(barInt, new Random());
          BigDecimal fooBigDecimal = new BigDecimal(123L);
          String name = scanner.next();
          byte numByte = scanner.nextByte();
          int numInt = scanner.nextInt();
          float numFloat = scanner.nextFloat();
          double numDouble = scanner.nextDouble();
          boolean bool = scanner.nextBoolean();
          /*
           * Arrays Declaring <datatype>[] <var name> = new <datatype> [<array size]
           */
          int[] intArrays = new int[10];
          /*
           * Other data structure: ArrayList,LinkedList,Maps(HashMap,TreeMap)
           */
          /*
           * Operators: Increment operators
           * i++ return then increment
           * i--
           * ++i increment then return
           * --i Bitwise operators: ~ << >> >>> & ^ |
           */
          /*
           * Control Structures
           */
          int j = 10;
          if (j == 10) {
          } else if (j > 10) {
          } else {
          }
          int fooWhile = 0;
          while (fooWhile < 100) {
              System.out.println(fooWhile);
              fooWhile++;
          }
          do {
              System.out.println(fooWhile);
              fooWhile--;
          } while (fooWhile > 0);
          for (int i = 0; i < 10; i++) {
              System.out.println(i);
          }
          int[] fooList = {1, 2, 3, 4, 5};
          for (int bar : fooList) {
              System.out.println(bar);
          }
          /*
           * Switch Case
           */
          int month = 3;
          String monthString;
          switch (month) {
              case 1:
                  monthString = "January";
                  break;
              case 2:
                  monthString = "February";
                  break;
              case 3:
                  monthString = "March";
              default:
                  monthString = "some other month";
                  break;
          }
          /*
           * Try-with-resource
           * In the try statement, the class must implement java.lang.AutoCloseable.
           */
          try (BufferedReader br = new BufferedReader(new FileReader("foo.txt"))) {
              System.out.println(br.readLine());
              /*
               * In Java 7, the resource will always be closed, even if it throws an Exception
               *
               * */
          } catch (Exception ex) {
              /*
               * The resource will be closed before the catch statement executes.
               * */
              System.out.println("readLine() failed.");
              /*
               * No need for a finally staement in this case, the BufferReader is already closed.
               * This can be used to avoid certain edge cases where a finally statement might not be called.
               *
               * */
          }
          /*
           * Converting Data Types
           * Double, Long, String have the same method
           * */
          Integer.parseInt("123");
          Integer.toString(123);
      }
      /*
       * Enum Type
       */
      enum Day {
          SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY
      }
      /*
       * Interfaces declaration syntax <access-level> interface <interface-name>
       * extends <super-interfaces> { //Constants //Method declarations }
       */
      interface Edible {
          public void eat();
      }
      interface Digestible {
          public void digest();
          // Since java 8,interface can have default method.
          public default void defaultMethod() {
              System.out.println("Hi from default method.");
          }
      }
  }
#+end_src