#+title: notes/qna

* 框架测试
** 1. 填空


1.  Struts2常量在=struts.xml=文件中的配置方式是：=<constant name="" value="" />=
2.  Struts2中常见的拦截器（5个）：

    1.  Cookies Interceptor
    2.  Conversion Error Interceptor
    3.  Create Session Interceptor
    4.  Exception Interceptor
    5.  File Upload Interceptor
    6.  I18n Interceptor
    7.  Logger Interceptor
    8.  Model Driven Interceptor
    9.  Parameters Interceptor
    10. Servlet Config Interceptor
    11. Timer Interceptor
    12. Token Interceptor
    13. Validation Interceptor
    14. Parameter Filter Interceptor

3.  Struts2的核心控制器：=org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter=
4.  Hibernate的5个核心接口：

    1. Configuration
    2. SessionFactory
    3. Session
    4. Transaction
    5. Query与Criteria

5.  Hibernate中查询数据的方式有：

    1. 对象导航查询，=load()=,=get()=
    2. OID查询
    3. HQL（创建Query对象，写入HQL语句，调用query对象方法得到结果）
    4. QBC，QBE，Filter
    5. SQL

6.  Spring的两大核心：

    1. IoC/DI
    2. AOP

7.  SpringMVC核心入口类：DispatcherServlet
8.  SpringMVC中的控制器注解一般用：=@Controller=
9.  SpringMVC中函数的返回值一般使用：=String=或JavaBean比较好
10. SpringMVC中把视图和数据合并在一起的类是：=ModelAndView=
11. MyBatis的编程步骤是：

    1. 创建=SQLSessionFactory=
    2. 通过=SQLSessionFactory=创建=SQLSession=
    3. 通过=SQLSession=执行SQL操作
    4. 调用=session.commit()=提交事务
    5. 调用=session.close()=关闭会话

12. 在Spring中=ApplicationContext=常用实现有：

    1. ClassPathXmlApplicationContext
    2. FileSystemXmlApplicationContext
    3. AnnotationConfigApplicationContext

13. Spring中依赖注入的方式有：

    1. =@Autowired=自动装配

       1. byType
       2. byName
       3. constructor

    2. =setter=方法注入
    3. 构造器注入
    4. 静态工厂方法注入
    5. 实例工厂方法注入
** 2. 简答
*** 2.1. Struts2如何处理文件上传

#+begin_example
  <s:form action="uploadSingleFile" method="post" enctype="multipart/form-data">
    <s:file label="File" name="file"></s:file>
    <s:submit value="Upload"></s:submit>
  </s:form>
#+end_example

#+begin_src java
  import org.apache.commons.io.FileUtils;

  @data
  public class uploadFile extends ActionSupport{
     private File myFile;
     private String myFileContentType;
     private String myFileFileName;
     private String destPath;

     public String execute(){
        /* Copy file to a safe location */
        destPath = "the path where u want to save into";
        try{
           System.out.println("Src File name: " + myFile);
           System.out.println("Dst File name: " + myFileFileName);
           File destFile  = new File(destPath, myFileFileName);
           FileUtils.copyFile(myFile, destFile);  
        }catch(IOException e){
           e.printStackTrace();
           return ERROR;
        }
        return SUCCESS;
     }
  }
#+end_src
*** 2.2. Struts2和SpringMVC的优缺点比较
**** 2.2.1. 简述


1. springmvc 的入口是一个 servlet 即前端控制器，而 struts2 入口是一个
   filter 过虑器
2. springmvc 是基于方法开发(一个 url
   对应一个方法)，请求参数传递到方法的形参，设计为单例或多例(建议单例)，struts2
   是基于类开发，传递参数是通过类的属性，只能计为多例。
3. Struts 采用值栈存储请求和响应的数据，通过 OGNL 存取数据，springmvc
   通过参析器是将 request
   请求内容解析，并给方法形参赋值，将数据和视图封装成
   ModelAnd对象，最后又将 ModelAndView 中的模型数据通过 reques
   域传输到页面。Jsp 视图解析认使用 jstl。
**** 2.2.2. 比较

// todo

| 比较            | SpringMVC                        | Struts2                               |
|-----------------+----------------------------------+---------------------------------------|
| 入口            | Servlet                          | Filter                                |
| 请求            | 基于方法处理                     | 基于对象（Action）处理                |
| 性能            | 稍快                             | 稍慢                                  |
| 参数接收        | 方法参数绑定                     | 对象属性使用使用setter/getter方法存取 |
| Intercepter实现 | 独立的AOP方法                    | 使用自己实现的Intercepter机制         |
| 数据校验        | 遵循Java标准的校验接口，JSR303等 | 声明式校验或自己实现                  |
*** 2.3. Hibernate的缓存机制是怎样的


1. *一级缓存*：Hibernate一级缓存是Session缓存，利用好一级缓存就需要对Session的生命周期进行管理好。建议在一个Action操作中使用一个Session。一级缓存需要对Session进行严格管理。
   Hibernate的一级缓存是默认开启的，当获取到一个Session对象，并执行save、update、saveOrUpdate、get方法时就会用到Hibernate一级缓存，当然也可以调用清除的放方法，Session为清除缓存提供了clear(清除所有的一级缓存)、evict(清除实例对象缓存)、refresh（重新查询数据并刷新缓存）。
2. *二级缓存*：二级缓存是SessionFactory级的缓存。hibernate的二级缓存是默认关闭的(二级缓存的数据是放在堆中)，如果需要开启二级缓存则需要额外的配置。SessionFactory的缓存分为内置缓存和外置缓存。内置缓存中存放的是SessionFactory对象的一些集合属性包含的数据(映射元素据及预定SQL语句等),对于应用程序来说,它是只读的。外置缓存中存放的是数据库数据的副本,其作用和一级缓存类似.二级缓存除了以内存作为存储介质外,还可以选用硬盘等外部存储设备。二级缓存称为进程级缓存或SessionFactory级缓存，它可以被所有session共享，它的生命周期伴随着SessionFactory的生命周期存在和消亡。
*** 2.4. Mybatis的缓存机制是怎样的
**** 2.4.1. 简单解释
***** 2.4.1.1. 一级缓存

Mybatis的一级缓存是指Session缓存。一级缓存的作用域默认是一个SqlSession。Mybatis默认开启一级缓存。
也就是在同一个SqlSession中，执行相同的查询SQL，第一次会去数据库进行查询，并写到缓存中；
第二次以后是直接去缓存中取。
当执行SQL查询中间发生了增删改的操作，MyBatis会把SqlSession的缓存清空。

一级缓存的范围有SESSION和STATEMENT两种，默认是SESSION，如果不想使用一级缓存，可以把一级缓存的范围指定为STATEMENT，这样每次执行完一个Mapper中的语句后都会将一级缓存清除
***** 2.4.1.2. 二级缓存

Mybatis的二级缓存是指mapper映射文件。二级缓存的作用域是同一个namespace下的mapper映射文件内容，多个SqlSession共享。Mybatis需要手动设置启动二级缓存。
**** 2.4.2. 详细解释

MyBatis
包含一个非常强大的查询缓存特性,它可以非常方便地配置和定制。MyBatis 3
中的缓存实现的很多改进都已经实现了,使得它更加强大而且易于配置。

默认情况下是没有开启缓存的,除了局部的 session
缓存,可以增强变现而且处理循环
依赖也是必须的。要开启二级缓存,你需要在你的 SQL 映射文件中添加一行:
=<cache/>= 字面上看就是这样。这个简单语句的效果如下:

1. 映射语句文件中的所有 select 语句将会被缓存。
2. 映射语句文件中的所有 insert,update 和 delete 语句会刷新缓存。
3. 缓存会使用 Least Recently Used(LRU,最近最少使用的)算法来收回。
4. 根据时间表(比如 no Flush Interval,没有刷新间隔),
   缓存不会以任何时间顺序 来刷新。
5. 缓存会存储列表集合或对象(无论查询方法返回什么)的 1024 个引用。
6. 缓存会被视为是
   read/write(可读/可写)的缓存,意味着对象检索不是共享的,而
   且可以安全地被调用者修改,而不干扰其他调用者或线程所做的潜在修改。

所有的这些属性都可以通过缓存元素的属性来修改。

比如:
=<cache  eviction=”FIFO”  flushInterval=”60000″  size=”512″  readOnly=”true”/>=

这个更高级的配置创建了一个 FIFO 缓存,并每隔 60
秒刷新,存数结果对象或列表的 512
个引用,而且返回的对象被认为是只读的,因此在不同线程中的调用者之间修改它们会
导致冲突。可用的收回策略有, 默认的是 LRU:

1. LRU -- 最近最少使用的:移除最长时间不被使用的对象。
2. FIFO -- 先进先出:按对象进入缓存的顺序来移除它们。
3. SOFT -- 软引用:移除基于垃圾回收器状态和软引用规则的对象。
4. WEAK -- 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。

flushInterval(刷新间隔)可以被设置为任意的正整数,而且它们代表一个合理的毫秒
形式的时间段。默认情况是不设置,也就是没有刷新间隔,缓存仅仅调用语句时刷新。

size(引用数目)可以被设置为任意正整数,要记住你缓存的对象数目和你运行环境的
可用内存资源数目。默认值是1024。

readOnly(只读)属性可以被设置为 true 或
false。只读的缓存会给所有调用者返回缓
存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。可读写的缓存
会返回缓存对象的拷贝(通过序列化) 。这会慢一些,但是安全,因此默认是
false。
*** 2.5. Hibernate与MyBatis缓存机制比较

相同点：Hibernate和Mybatis的二级缓存除了采用系统默认的缓存机制外，都可以通过实现你自己的缓存或为其他第三方缓存方案，创建适配器来完全覆盖缓存行为。

不同点：Hibernate的二级缓存配置在SessionFactory生成的配置文件中进行详细配置，然后再在具体的表-对象映射中配置是那种缓存。

MyBatis的二级缓存配置都是在每个具体的表-对象映射中进行详细配置，这样针对不同的表可以自定义不同的缓存机制。并且Mybatis可以在命名空间中共享相同的缓存配置和实例，通过Cache-ref来实现。

两者比较：因为Hibernate对查询对象有着良好的管理机制，用户无需关心SQL。所以在使用二级缓存时如果出现脏数据，系统会报出错误并提示。

而MyBatis在这一方面，使用二级缓存时需要特别小心。如果不能完全确定数据更新操作的波及范围，避免Cache的盲目使用。否则，脏数据的出现会给系统的正常运行带来很大的隐患。
*** 2.6. 什么是Spring的IoC（DI）


#+begin_quote
  调用类将控制权转移给第三方工厂类，调用类在执行方法中向工厂类所要对象并执行相应的业务方法。实例化对象及设置对象的依赖关系，管理对象的生命周期，负责提供对象。
#+end_quote
*** 2.7. 什么是Spring的AOP


#+begin_quote
  在传统的软件系统中存在一些象日志记录、事务处理等通用性的代码块，它们通常
  散落在各个程序中，被称之为"横切逻辑"(cross-cutting concern)。
  将这些横切逻辑以面向对象的方式单独进行封装，从而形成切面(aspect)，并在
  程序执行时切入进来的编程方法，被称之为面向切面编程。
#+end_quote

基本概念：

1. JoinPoint：目标类在执行过程中可以切入增强代码的位置；从理论上讲有静态代码块，
   循环语句块，方法等程序执行位置
2. PointCut：切入点是连接点的表示方式，可以指定一个连接点或者多个连接点，通常使用AspectJ所定义的切入点表达式。
3. Advice：通知代表横切逻辑，是切入连接点的增强代码，通常被定义在一个类的方法中
   或者被单独封装到一个类中，比如事务拦截器。
4. Aspect：
   切面是通知和切入点的组织与封装；SpringIoC容器根据切面，将Advice作用到
   相应的JoinPoint上；因此：=Aspect=Advice+Pointcut=。
5. Weave：在不侵入目标对象的业务方法的情况下，切入横切逻辑，即将附加的增强代码和
   目标对象的业务方法整合起来。
*** 2.8. SpringMVC怎么和ajax项目调用
** 3. 编程
*** 3.1. SSH整合实现登录功能
*** 3.2. SSM整合实现注册功能
*** 3.3.
一球从100米高度字有落下，每次落回地面后反跳回原高度的一半，再落下


1. 问第十次落地时共经过多少米？
2. 第十次落地后反弹多高？
*** 3.4. 写一个符合Singleton（单例模式）的java代码
** 4. 笔试
*** 4.1. Servlet的生命周期
*** 4.2. 写出Servlet中接受客户端传递数据的方法，和发送数据到客户端的方法
*** 4.3. 简述forward和redirect的区别
*** 4.4. HTTP亲求的GET和POST方法的区别
*** 4.5. 简述Java中final，finally，finallize的区别


1. final 用于声明属性,方法和类, 分别表示属性不可变, 方法不可覆盖,
   类不可继承.
2. finally 是异常处理语句结构的一部分，表示总是执行.
3. finalize
   是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等.
   JVM不保证此方法总被调用.
*** 4.6. Tomcat默认的发布项目的文件夹名称

=tomcat/webapps/=
*** 4.7. List，Map，Set的区别
*** 4.8. 什么是Java多线程
**** 4.8.1. =Thread=线程类
***** 4.8.1.1. 继承=Thread=
***** 4.8.1.2. =Runnable=接口
***** 4.8.1.3. =Callable=接口
**** 4.8.2. 多线程控制
***** 4.8.2.1. =ThreadLocal=类
***** 4.8.2.2. 原子类


- AtomicInteger等
- AtomicReference
***** 4.8.2.3. Lock类
***** 4.8.2.4. 容器类


- BlockingQueue
- ConcurrentHashMap
***** 4.8.2.5. 管理类


- ThreadMXBean
- ThreadPoolExecutor
*** 4.9.
有如下HTML代码，请使用jquery的方式，获得如上元素，并将p标签的内容设置成"你好，中国"

#+begin_example
  <p id="myapp"></p>
#+end_example

ans:

#+begin_example
  $(p#myapp).html("你好，中国");
#+end_example
*** 4.10.
js中给全部数字元素排序的原生方法是什么？其中使用的是什么排序方法？

#+begin_example
  var arr = [];
  arr.sort();
#+end_example
*** 4.11. js如何得到HTTP的请求头信息和返回头信息

#+begin_example
  var xhr = new XMLHttpRequest();
  xhr.open('GET', '/server', true);
  xhr.setRequestHeader();
  xhr.send(null);
  xhr.getAllReponseHeaders();
#+end_example
*** 4.12. 简述对SSM或者SSH的理解
*** 4.13. 有学生成绩表（stuscore）

| 姓名 name | 课程 subject | 分数 score | 学号 stuid |
|-----------+--------------+------------+------------|
| ...       | ...          | ...        | ...        |
**** 4.13.1.
写出计算每个人的总成绩并排名的sql语句（要求字段：姓名，总成绩）

#+begin_src sql
  select
  name,sum(subject)
  from stuscore
  group by name
  order by desc;
#+end_src
**** 4.13.2.
写出计算每个人的平均成绩的sql语句（要求字段：学号，姓名，平均成绩）

#+begin_src sql
  select
  stuid,name,avg(subject)
  from stuscore
  group by stuid,anme;
#+end_src