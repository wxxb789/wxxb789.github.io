

* Spring框架两大主题

** 1. 控制反转与依赖注入(IoC&DI)


1.  依赖注入是控制反转的具体实现 ### 1.1. 控制反转(IoC：Inversion of
    Control)
2.  控制权

    1. 创建对象的权利；
    2. 设置对象依赖关系的权利；

3.  反转

    1. 调用类将控制权转移给第三方工厂类；
    2. 调用类在执行方法中，向工厂类索要对象并执行相应的业务方法； ###
       1.2. 依赖注入(DI：Dependency Injection) #### 1.2.1.
       依赖关系和依赖解耦

4.  类的依赖关系

    1. 如果在一个类(调用类)的业务方法中使用另外一个类(被调用类)的业务方法来完成自己的功能，那么这两个类就构成了依赖关系。

5.  依赖关系的两种表现形式

    1. 仅在调用类方法中依赖

       1. 在方法中创建所依赖对象；
       2. 被依赖对象的生命周期仅局限在调用类的方法范围内；

    2. 属性依赖【注意】:Spring框架中研究的依赖形式是属性依赖！

       1. 将所依赖的类作为调用类属性的类型；
       2. 被依赖对象的生命周期与调用类对象的生命周期相同；

6.  依赖耦合

    1. 调用类的依赖属性的类型是具体的实现类；即调用类依赖具体的实现类；
    2. 依赖耦合的问题是：针对调用类实施功能扩展时，需要大量修改代码

7.  依赖解耦

    1. 封装调用类时，它的依赖属性的类型是接口而不是具体的实现类；
    2. 依赖解耦的实现思想：

       1. 调用类依赖接口，而不是具体的类；
       2. 被调用的类（所依赖的类）需要实现接口； #### 1.2.2. 依赖注入

8.  依赖注入

    1. 通过IoC容器设置bean对象的属性，不再通过调用setter方法或者有参构造器进行设置；
    2. 依赖注入需要在xml配置文件中，提供具体的属性值；

9.  属性值的注入

    1. 字面值注入：配置时bean标签中使用value属性

       1. 基本数据类型及其基本数据类型包装类

          1. byte、short、char、int、long
          2. boolean
          3. double、float

       2. String类型

    2. 对象注入(真正的依赖注入)：配置时bean标签使用ref属性 ## 2.
       面向切面编程(AOP：Aspect Oriented Programming)

10. 横切逻辑

    1. 在传统的软件系统中，散落在各个程序中的通用性的代码块，被称之为"横切逻辑"(cross-cutting
       concern)。

11. 面向切面编程

    1. 将这些横切逻辑以面向对象的方式单独进行封装，从而形成切面(aspect)，并在程序执行时切入进来的编程方法，被称之为面向切面编程。

12. AOP的实现方式

    1. AspectJ

       1. AspectJ是一个基于Java的AOP编程语言，它通常采用ajc编译器，将横切逻辑切入到目标类的字节码中，被称为静态AOP。

    2. SpringAOP(重点)

       1. Spring框架提供一个基于动态代理模式的实现机制，被称为动态AOP。

    3. JBossAOP

       1. 基于JBoss应用服务器的一种动态AOP的实现。