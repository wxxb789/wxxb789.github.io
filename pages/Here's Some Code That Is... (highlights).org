:PROPERTIES:
:title: Here's Some Code That Is... (highlights)
:END:

:PROPERTIES:
:author: [[davidfowl on Twitter]]
:full-title: "Here's Some Code That Is..."
:category: [[tweets]]
:url: https://twitter.com/davidfowl/status/1678738294933159937
:END:

* Highlights first synced by [[Readwise]] [[2023-07-11]]
** ðŸ“Œ
** #+BEGIN_QUOTE
** Here's some code that is on the hot path on your application and you want to optimize it. This is what a typical C# developer would write (actually copilot wrote this). It's pretty clear, but suboptimal. How could you go about improving it? #dotnet #csharp 

![](https://pbs.twimg.com/media/F0wTLdtXsAIsI-d.jpg) ([View Tweet](https://twitter.com/davidfowl/status/1678738294933159937))
** #+END_QUOTE
** ðŸ“Œ
** #+BEGIN_QUOTE
** There are lots of allocations here:
1. The string[] splitting up query string parts by &
2. Each key value pair string[] splitting each part by =
3. The List<string> of new results
4. The final string ([View Tweet](https://twitter.com/davidfowl/status/1678741683997999104))
** #+END_QUOTE
** ðŸ“Œ
** #+BEGIN_QUOTE
** One more assumption you can make: The instanceId will only occur once or 0 times in the input querystring. ([View Tweet](https://twitter.com/davidfowl/status/1678742153701228544))
** #+END_QUOTE
** ðŸ“Œ
** #+BEGIN_QUOTE
** I think most people would start with this code a single LINQ statement ðŸ˜Š. ([View Tweet](https://twitter.com/davidfowl/status/1678742671408394243))
** #+END_QUOTE
** ðŸ“Œ
** #+BEGIN_QUOTE
** There are some trends in the replies. The most efficient solutions really require re-thinking the problem and constraints. This is why performance work is difficult and not a one size fits all solution. Do you optimize the current code? Or do you change the approach? ([View Tweet](https://twitter.com/davidfowl/status/1678748020114874368))
** #+END_QUOTE
** ðŸ“Œ
** #+BEGIN_QUOTE
** Here's the allocation profile for 100,000 calls to this method: 

![](https://pbs.twimg.com/media/F0wfpKqXgAEZjXn.png) ([View Tweet](https://twitter.com/davidfowl/status/1678751685097791488))
** #+END_QUOTE
** ðŸ“Œ
** #+BEGIN_QUOTE
** I think most of the answers landed on 2 approaches:
1. Optimize the current code using Spans, stack alloc and various other approaches to reduce the overhead and intermediate allocations.
2. Find the "instanceId=" inside of the query string and remove it. ([View Tweet](https://twitter.com/davidfowl/status/1678765235153567747))
** #+END_QUOTE
** ðŸ“Œ
** #+BEGIN_QUOTE
** I ended up with number 2 as well, but I think it's worth discussing 1 more as an exploration of new APIs, options and tradeoffs. ([View Tweet](https://twitter.com/davidfowl/status/1678765239440113671))
** #+END_QUOTE
** ðŸ“Œ
** #+BEGIN_QUOTE
** So, if we assume the existing pattern:
1. Split up the query string into parts
2. Find the relevant key value pair with the "instanceId" key.
3. Build a new string without that pair.

Let's look at each problem separately. ([View Tweet](https://twitter.com/davidfowl/status/1678766052153634816))
** #+END_QUOTE
** ðŸ“Œ
** #+BEGIN_QUOTE
** Splitting the query string into parts. Any good 20+ year old framework has multiple ways of doing things:
1. https://t.co/xePqkuf8VU
2. https://t.co/0BDOvCcmkI

These both allocate collections that represent the decoded query string values. ([View Tweet](https://twitter.com/davidfowl/status/1678767596664152065))
** #+END_QUOTE
** ðŸ“Œ
** #+BEGIN_QUOTE
** We recently added https://t.co/Pm34xTsPhU to allow allocation free enumeration of these values. 

![](https://pbs.twimg.com/media/F0wu5fPacAA7eMx.jpg) ([View Tweet](https://twitter.com/davidfowl/status/1678768353438216198))
** #+END_QUOTE
** ðŸ“Œ
** #+BEGIN_QUOTE
** You can also use the StringTokenizer to do allocation free splitting based on a separator https://t.co/n2QtKmWYFr ([View Tweet](https://twitter.com/davidfowl/status/1678771087348494338))
** #+END_QUOTE
** ðŸ“Œ
** #+BEGIN_QUOTE
** There's also a new Split method (https://t.co/5Aj1HZUept) for Spans that works well if you know the maximum number of segments after splitting: 

![](https://pbs.twimg.com/media/F0wx6k3aQAE1i1B.jpg) ([View Tweet](https://twitter.com/davidfowl/status/1678771791093968907))
** #+END_QUOTE
** ðŸ“Œ
** #+BEGIN_QUOTE
** When you don't know the segments in advance, you can do a pass to figure that out with MemoryExtensions.Count. https://t.co/skknMjzRf2
It's extremely optimized (vectorization etc etc). 

![](https://pbs.twimg.com/media/F0w0wc4aQAMo27y.jpg) ([View Tweet](https://twitter.com/davidfowl/status/1678775361138745344))
** #+END_QUOTE