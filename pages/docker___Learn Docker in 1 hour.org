#+title: Docker/Learn Docker in 1 hour
#+tags: docker, container

* [[bilibili]] 
[[https://www.bilibili.com/video/BV11L411g7U1][Learn Docker in 1 hour]]
* Basic Usage
** Install docker and docker desktop
*** Add Mirror to Docker Engine config
** Command

[[https://docs.docker.com/engine/reference/commandline/cli/][Docker command line Reference]] 

#+BEGIN_SRC bash
docker run -d -p <port:port> --name <image name>

docker-compose up -d

docker network create <net-name>
# --network-alias indicates the endpoint name
# redis://redis:6379
docker run -d --name redis --network <created-net-name> --network-alias redis redis:latest

# 查看当前运行中的容器
docker ps
# 查看镜像列表
docker images
# 删除指定 id 的容器
docker rm <container-id>
# 停止/启动指定 id 的容器
docker stop/start <container-id>
# 删除指定 id 的镜像
docker rmi <image-id>
# 查看 volume 列表
docker volume ls
# 查看网络列表
docker network ls

# docker-compose
# 查看运行状
docker-compose ps
# 停止运行
docker-compose stop
# 重启
docker-compose restart
# 重启单个服务
docker-compose restart <service-name>
# 进入容器命令行
docker-compose exec <service-name> sh
# 查看容器运行log
docker-compose logs <service-name>
#+END_SRC
***
**
* Build Image
docker build image from a [[Dockerfile]].
* Mount
[[../assets/image_1649944225849_0.png]]
** =bind mount=
映射宿主机目录

#+BEGIN_SRC bash
-v D:/app:/app
#+END_SRC
** =volumn= recommend
由容器在宿主机上创建和管理，可以挂载到多个容器上。
使用场景：数据库存储

#+BEGIN_SRC bash
-v <name>:/app
#+END_SRC
** =tmpfs mount=
适合存储临时文件，位于宿主机内存中。不可以用于多容器共享。
* Communication
create a network and all dockers in the same network could communicate to each other.
* =docker-compose=
[[https://docs.docker.com/compose/][docker-compose Reference]]
同一个 =docker-compose.yml= 下的 services 使用同一个 network，不需要手动配置
** =docker-compose up -d=
file name: docker-compose.yml
#+BEGIN_SRC yml
version: "3.7"

services:
  app:
    build: ./
    ports:
      - 80:8080
    volumes:
      - ./:/app
    environment:
      - TZ=Asia/Shanghai
  redis:
    image: redis:5.0.13
    volumes:
      - redis:/data
    environment:
      - TZ=Asia/Shanghai

volumes:
  redis:
#+END_SRC
* Publish

#+BEGIN_SRC bash
docker login -u <username>
# add tag
docker tag test:v1 <username>/test:v1
docker push <username>/test:v1
# deploy
docker run -dp 8080:8080 username/test:v1
#+END_SRC
* Backup and Migration
** Buckup
*** 1. 运行 Ubuntu 容器，并挂载要备份的 Volume 和宿主机的备份目录
2. 压缩为 tar 包
3. copy 备份文件到宿主机
** Recovery
*** 1. 运行 Ubuntu 容器，并挂载要备份的 Volume 和宿主机的备份目录
2. 把宿主机的备份文件拷贝并解压到 Volume 中
** Example
备份和恢复一个 mongodb

#+BEGIN_SRC bash
# Backup
# 运行一个 mongodb，创建一个名叫mongo-data的 volume 指向容器的 /data 目录
docker run -p 27018:27017 --name mongo -v mongo-data:/data -d mongo:4.4

# 运行一个 Ubuntu 的容器，挂载mongo容器的所有 volume，映射宿主机的 backup 目录到容器里面的 /backup 目录，然后运行 tar 命令把数据压缩打包
docker run --rm --volumes-from mongo -v d:/backup:/backup ubuntu tar cvf /backup/backup.tar /data/

# Recovery
运行一个 ubuntu 容器，挂载 mongo 容器的所有 volumes，然后读取 /backup 目录中的备份文件，解压到 /data/ 目录
docker run --rm --volumes-from mongo -v d:/backup:/backup ubuntu bash -c "cd /data/ && tar xvf /backup/backup.tar --strip 1"
#+END_SRC